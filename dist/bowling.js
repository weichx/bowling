webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(3);
	__webpack_require__(15);
	__webpack_require__(17);
	__webpack_require__(18);
	__webpack_require__(19);
	__webpack_require__(20);
	__webpack_require__(21);
	__webpack_require__(2);
	__webpack_require__(36);
	__webpack_require__(35);
	__webpack_require__(37);
	__webpack_require__(42);
	__webpack_require__(41);
	__webpack_require__(54);
	__webpack_require__(32);
	__webpack_require__(40);
	__webpack_require__(31);
	__webpack_require__(14);
	__webpack_require__(29);
	__webpack_require__(24);
	__webpack_require__(26);
	__webpack_require__(27);
	__webpack_require__(28);
	__webpack_require__(22);
	__webpack_require__(34);
	__webpack_require__(33);
	__webpack_require__(55);
	__webpack_require__(23);
	__webpack_require__(30);
	__webpack_require__(56);
	__webpack_require__(57);
	__webpack_require__(58);
	__webpack_require__(64);
	__webpack_require__(52);
	__webpack_require__(25);
	module.exports = __webpack_require__(37);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	const GLUtil = __webpack_require__(2);

	class GLBuffer {

	    constructor(arrayType, fixedArray, itemSize) {
	        const gl = GLUtil.getGl();
	        this.glBuffer = gl.createBuffer();
	        // gl.bindBuffer(arrayType, this.glBuffer);
	        // gl.bufferData(arrayType, fixedArray, gl.STATIC_DRAW);
	        this.itemCount = 0;//fixedArray.length;
	        this.itemSize = 0;//itemSize;
	    }

	}

	module.exports = GLBuffer;

/***/ },
/* 2 */
/***/ function(module, exports) {

	var ShaderType = {
	    Vertex: "Vertex",
	    Fragment: "Fragment"
	};

	var gl = null;
	var canvas = null;

	class GLUtil {

	    static getGl() {
	        return gl;
	    }

	    static getCanvas() {
	        return canvas;
	    }

	    static initGL(canvasId) {
	        try {
	            canvas = document.getElementById(canvasId);
	            gl = canvas.getContext("webgl");
	            gl.viewportWidth = canvas.width;
	            gl.viewportHeight = canvas.height;
	        } catch (e) {
	            console.error(e);
	        }
	        if (!gl) {
	            alert("Could not initialise WebGL, try a different browser dude!");
	        }
	    }

	    static createShaderProgram(vertexSource, fragmentSource) {
	        var vertexShader = GLUtil.compileShader(ShaderType.Vertex, vertexSource);
	        var fragmentShader = GLUtil.compileShader(ShaderType.Fragment, fragmentSource);
	        var shaderProgram = gl.createProgram();
	        gl.attachShader(shaderProgram, vertexShader);
	        gl.attachShader(shaderProgram, fragmentShader);
	        gl.linkProgram(shaderProgram);
	        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
	            alert("Could not initialize shaders");
	        }
	        return shaderProgram;
	    }

	    static compileShader(shaderType, shaderSource) {
	        var shader = null;
	        if (shaderType === ShaderType.Fragment) {
	            shader = gl.createShader(gl.FRAGMENT_SHADER);
	        }
	        else if (shaderType === ShaderType.Vertex) {
	            shader = gl.createShader(gl.VERTEX_SHADER);
	        }
	        gl.shaderSource(shader, shaderSource);
	        gl.compileShader(shader);
	        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
	            alert(gl.getShaderInfoLog(shader));
	            return null;
	        }
	        return shader;
	    }

	    static loadTexture(url) {
	        var img = new Image();
	        return new Promise(function(resolve) {
	            img.onload = function () {
	                resolve(GLUtil.setupTexture(img));
	            };
	            img.src = url;
	        });
	    }

	    static setupTexture(image) {
	        const gl = GLUtil.getGl();
	        var tex = gl.createTexture();
	        gl.bindTexture(gl.TEXTURE_2D, tex);
	        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
	        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
	        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
	        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
	        gl.generateMipmap(gl.TEXTURE_2D);
	        gl.bindTexture(gl.TEXTURE_2D, null);
	        return tex;
	    }
	}

	module.exports = GLUtil;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	const mat4 = __webpack_require__(4).mat4;
	const GLUtil = __webpack_require__(2);
	const SceneObject = __webpack_require__(14);

	class Camera extends SceneObject {

	    constructor(parent) {
	        super(parent);
	        this.fov = 45.0;
	        this.nearClipPlane = 0.01;
	        this.farClipPlane = 1000.0;
	        this.projectionMatrix = mat4.create();
	        mat4.identity(this.projectionMatrix);
	        this.setPosition(0, 0.5, -5);
	    }

	    updatePerspectiveMatrix() {
	        mat4.perspective(this.projectionMatrix, this.fov, this.aspectRatio, this.nearClipPlane, this.farClipPlane);
	    }

	    get aspectRatio() {
	        const gl = GLUtil.getGl();
	        return gl.drawingBufferWidth / gl.drawingBufferHeight;
	    }

	}

	module.exports = Camera;

/***/ },
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	const vec3 = __webpack_require__(4).vec3;
	const quat = __webpack_require__(4).quat;
	const mat4 = __webpack_require__(4).mat4;
	const mat3 = __webpack_require__(4).mat3;
	const GLUtil = __webpack_require__(2);

	const forward = vec3.fromValues(0, 0, 1);
	const right = vec3.fromValues(1, 0, 0);
	const up = vec3.fromValues(0, 1, 0);

	class SceneObject {

	    constructor(parentNode, tag) {
	        this.tag = tag || "SceneObject";
	        this.setParent(parentNode);
	        this.model = null;
	        this.material = null;
	        this.rigidBody = null;
	        this.components = [];
	        this.children = [];
	        this.position = vec3.create();
	        this.rotation = quat.create();
	        quat.identity(this.rotation);
	        this.scale = vec3.fromValues(1, 1, 1);
	        this.__matrix = mat4.create();
	    }

	    initialize() {
	        for (var i = 0; i < this.components.length; i++) {
	            this.components[i].initialize();
	        }
	    }

	    findChild(tag) {
	        for(var i = 0; i < this.children.length; i++) {
	            if (this.children[i].tag === tag) return this.children[i];
	        }
	        return null;
	    }

	    findChildren(tag) {
	        var retn = [];
	        for(var i = 0; i < this.children.length; i++) {
	            if (this.children[i].tag === tag) retn.push(this.children[i]);
	        }
	        return retn;
	    }

	    render(parentWorldMatrix, viewMatrix, projectionMatrix) {
	        const wvp = mat4.create();
	        mat4.multiply(wvp, parentWorldMatrix, viewMatrix);
	        mat4.multiply(wvp, wvp, projectionMatrix);

	        this.renderSelf(parentWorldMatrix, viewMatrix, projectionMatrix);

	        var worldMatrix = this.getMatrix();
	        for (var i = 0; i < this.children.length; i++) {
	            this.children[i].render(worldMatrix, viewMatrix, projectionMatrix);
	        }
	    }

	    renderSelf(parentWorld, viewMatrix, projectionMatrix) {
	        if(!this.model) return;

	        const gl = GLUtil.getGl();
	        const material = this.material;
	        const shaderPointers = material.shaderPointers;
	        const vertexBuffer = this.model.vertexBuffer;
	        const indexBuffer = this.model.indexBuffer;
	        const uvBuffer = this.model.uvBuffer;

	        gl.useProgram(material.program);

	        var mvMatrix = mat4.create();
	        var world = this.getMatrix();
	        mat4.multiply(world, world, parentWorld);
	        mat4.multiply(mvMatrix, viewMatrix, world);

	        var normalMatrix = mat3.create();
	        mat3.normalFromMat4(normalMatrix, mvMatrix);
	        gl.uniformMatrix3fv(shaderPointers.uNormalMatrix, false, normalMatrix);

	        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer.glBuffer);
	        gl.vertexAttribPointer(shaderPointers.aVertexPosition, vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);
	        gl.enableVertexAttribArray(shaderPointers.aVertexPosition);

	        gl.bindBuffer(gl.ARRAY_BUFFER, uvBuffer.glBuffer);
	        gl.vertexAttribPointer(shaderPointers.aTextureCoord, uvBuffer.itemSize, gl.FLOAT, false, 0, 0);
	        gl.enableVertexAttribArray(shaderPointers.aTextureCoord);

	        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer.glBuffer);
	        gl.uniformMatrix4fv(shaderPointers.uPMatrix, false, projectionMatrix);
	        gl.uniformMatrix4fv(shaderPointers.uMVMatrix, false, mvMatrix);

	        gl.activeTexture(gl.TEXTURE0);
	        gl.bindTexture(gl.TEXTURE_2D, material.mainTexture);
	        gl.uniform1i(shaderPointers.uSampler, 0);
	        gl.uniform2fv(shaderPointers.uTextureTiling, [1, 1]);

	        gl.drawElements(gl.TRIANGLES, indexBuffer.itemCount, gl.UNSIGNED_SHORT, 0);
	    }

	    update() {
	        if(this.rigidBody && !this.rigidBody.test) {
	            var v = this.rigidBody.position;
	            var q = this.rigidBody.quaternion;
	            this.setPosition(v.x, v.y, v.z);
	            this.setRotation(q.x, q.y, q.z, q.w);
	        }

	        for (var i = 0; i < this.children.length; i++) {
	            this.children[i].update();
	        }
	    }

	    destroy() {
	        for (var i = 0; i < this.children.length; i++) {
	            this.children[i].destroy();
	        }
	    }

	    setScale(x, y, z) {
	        vec3.set(this.scale, x, y, z);
	    }

	    setRotation(x, y, z, w) {
	        quat.set(this.rotation, x, y, z, w);
	    }

	    setPosition(x, y, z) {
	        vec3.set(this.position, x, y, z);
	    }

	    getMatrix() {
	        mat4.identity(this.__matrix);
	        mat4.fromRotationTranslationScale(this.__matrix, this.rotation, this.position, this.scale);
	        return this.__matrix;
	    }

	    setParent(parent) {
	        if (this.parent) {
	            const idx = this.parent.children.indexOf(this);
	            if (idx !== -1) {
	                this.parent.children.splice(idx, 1);
	            }
	        }
	        this.parent = parent;
	        if (this.parent) {
	            this.parent.children.push(this);
	        }
	    }

	    getForward() {
	        var retn = vec3.create();
	        vec3.transformQuat(retn, forward, this.rotation); //may need to include parent rotation
	        return retn;
	    }

	    getRight() {
	        var retn = vec3.create();
	        vec3.transformQuat(retn, right, this.rotation);
	        return retn;
	    }

	    getUp() {
	        var retn = vec3.create();
	        vec3.transformQuat(retn, up, this.rotation);
	        return retn;
	    }

	}

	module.exports = SceneObject;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	const Physics = __webpack_require__(16);

	module.exports = {
	    GetBallResetPosition: function() { return new Physics.Vec3(0, 0.5, 12) },
	    PinPositions: [
	        [-0.4, -0.5, -10.5],
	        [0.4, -0.5, -10.5],
	        [1.2, -0.5, -10.5],
	        [-1.2, -0.5, -10.5],
	        [0, -0.5, -9.5],
	        [-0.9, -0.5, -9.5],
	        [0.9, -0.5, -9.5],
	        [0.5, -0.5, -8.5],
	        [-0.5, -0.5, -8.5],
	        [0, -0.5, -7.5]
	    ]
	};

/***/ },
/* 16 */,
/* 17 */
/***/ function(module, exports) {

	module.exports = {
	    Pending: 1 << 0,
	    Strike: 1 << 1,
	    Spare: 1 << 2,
	    Open: 1 << 3,
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = {
	    BeginGame: "BeginGame",
	    BeginTurn: "BeginTurn",
	    BeginFrame: "BeginFrame",
	    EndTurn: "EndTurn",
	    EndFrame: "EndFrame",
	    EndGame: "EndGame"
	};


/***/ },
/* 19 */
/***/ function(module, exports) {

	const MouseButton = {
	    None: 0,
	    Left: 1 << 0,
	    Right: 1 << 1,
	    Middle: 1 << 2
	};

	MouseButton.LeftOrRight = (MouseButton.Left | MouseButton.Right);
	MouseButton.Any = (MouseButton.Left | MouseButton.Right | MouseButton.Middle);


	module.exports = MouseButton;

/***/ },
/* 20 */
/***/ function(module, exports) {

	class EventEmitter {

	    constructor() {
	        this.listeners = {};
	        this.subscribers = [];
	    }

	    addEventSubscriber(subscriber) {
	        if (!subscriber || typeof subscriber !== "object") return null;

	        this.subscribers.push(subscriber);
	        return () => {
	            return this.removeEventSubscriber(subscriber);
	        };
	    }

	    removeEventSubscriber(subscriber) {
	        var idx = this.subscribers.indexOf(subscriber);
	        if (idx !== -1) this.subscribers.splice(idx, 1);
	        return idx !== -1;
	    }

	    on(eventName, handler, once) {
	        this.listeners[eventName] = this.listeners[eventName] || [];
	        this.listeners[eventName].push({
	            fn: handler,
	            once: once
	        });
	    }

	    once(eventName, handler) {
	        this.on(eventName, handler, true);
	    }

	    emit(eventName, ...args) {
	        var listeners = this.listeners[eventName] || [];
	        for (var i = 0; i < listeners.length; i++) {
	            var listener = listeners[i];
	            listener.fn.apply(null, args);
	            if (listener.once) {
	                this.listeners[eventName].splice(i, 1);
	                i--;
	            }
	        }
	        for (i = 0; i < this.subscribers.length; i++) {
	            var handler = this.subscribers[i];
	            if (typeof handler[eventName] === "function") {
	                handler[eventName].apply(handler, args);
	            }
	        }
	    }

	    remove(eventName, handler) {
	        var listeners = this.listeners[eventName];
	        if (!listeners) return;
	        var index = listeners.indexOf(handler);
	        index !== -1 && listeners.splice(index, 1);
	    }

	    off(eventName, handler) {
	        this.remove(eventName, handler);
	    }

	    removeAllListeners() {
	        this.listeners = {};
	    }

	    removeAll(eventName) {
	        this.listeners[eventName] = [];
	    }

	}

	module.exports = EventEmitter;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	const GLUtil = __webpack_require__(2);
	const SceneObject = __webpack_require__(14);
	const SplashScene = __webpack_require__(22);
	const GameStartScene = __webpack_require__(26);
	const GameSummaryScene = __webpack_require__(27);
	const PlayerTurnScene = __webpack_require__(28);
	const FrameScene = __webpack_require__(29);
	const TurnManager = __webpack_require__(30);
	const SceneManager = __webpack_require__(31);
	const Player = __webpack_require__(32);
	const Physics = __webpack_require__(16);
	const Camera = __webpack_require__(3);
	const Time = __webpack_require__(23);
	const mat4 = __webpack_require__(4).mat4;
	const Input = __webpack_require__(35);

	const IdentityMatrix = mat4.create();
	const PhysicsFixedRate = 1.0 / 60.0;

	class GameManager extends SceneManager {

	    constructor() {
	        super();
	        this.showScoreboard = false;
	        this.showSplashScreen = true;
	        this.showPlayerTurnMessage = false;
	        this.paused = false;
	        this.camera = new Camera();
	        this.root = new SceneObject();
	        this.turnManager = null;
	        this.input = new Input();
	        this.physics = new Physics.World();
	        this.physics.solver.iterations = 5;
	        this.physics.gravity.set(0, -9.82, 0);
	        this.physics.broadphase = new Physics.NaiveBroadphase();
	        this.physics.defaultContactMaterial.contactEquationStiffness = 1e6;
	        this.physics.defaultContactMaterial.contactEquationRelaxation = 10;
	        this.boundTick = (timestamp) => this.tick(timestamp);

	        this.sceneFlow = [
	            new SplashScene(this),
	        ];

	        const gl = GLUtil.getGl();
	        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
	        gl.clearColor(0.2, 0.2, 0.2, 1.0);
	        this.tick(0);
	    }

	    start(playerCount) {

	        this.sceneFlow.push(new GameStartScene(this));

	        for(var i = 0; i < 10; i++) {
	            this.sceneFlow.push(new FrameScene(this));
	            for(var j = 0; j < playerCount; j++) {
	                this.sceneFlow.push(new PlayerTurnScene(this));
	            }
	        }

	        this.sceneFlow.push(new GameSummaryScene(this));

	        var playerList = [];
	        for(i = 0; i < playerCount; i++) {
	            playerList.push(new Player("Player " + (i + 1)));
	        }
	        this.turnManager = new TurnManager(playerList);
	        this.turnManager.startGame();
	        this.beginScene();
	    }

	    tick(timestamp) {
	        Time.update(timestamp);
	        requestAnimationFrame(this.boundTick);
	        this.input.processInput();
	        if (this.paused) return;
	        this.currentScene.update();
	        this.physics.step(PhysicsFixedRate, Time.deltaTime, 3);
	        this.root.update();
	        this.render();
	    }

	    render() {
	        const gl = GLUtil.getGl();
	        this.checkForResize(gl);
	        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	        gl.enable(gl.DEPTH_TEST);
	        gl.enable(gl.CULL_FACE); //todo -- material dependent

	        var inv = this.camera.getMatrix();
	        mat4.invert(inv, inv);
	        this.root.render(IdentityMatrix, inv, this.camera.projectionMatrix);
	    }

	    checkForResize(gl) {

	        const windowWidth = window.innerWidth;
	        const windowHeight = window.innerHeight;

	        if (gl.canvas.width !== windowWidth || gl.canvas.height !== windowHeight) {

	            gl.canvas.width = Math.floor(window.innerWidth);
	            gl.canvas.height = Math.floor(window.innerHeight);
	            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
	            this.camera.updatePerspectiveMatrix();
	        }
	    }

	}

	module.exports = GameManager;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	const Time = __webpack_require__(23);
	const GameScene = __webpack_require__(24);
	const vec3 = __webpack_require__(4).vec3;
	const mat4 = __webpack_require__(4).mat4;
	const quat = __webpack_require__(4).quat;
	const degToRad = __webpack_require__(25).degToRad;

	class SplashScene extends GameScene {

	    constructor(gameManager) {
	        super("SplashScene", gameManager);
	        this.scratchCameraPosition = vec3.create();
	    }

	    enter() {

	    }

	    update() {
	        // const camera = this.sceneManager.camera;
	        //
	        // const angle = degToRad(1);
	        // const sinA = Math.sin(angle);
	        // const cosA = Math.cos(angle);

	       // vec3.rotate(camera.position, )
	        // var p = vec3.create();
	        // vec3.subtract(p, [0, 0, 0], camera.position);
	        //
	        // var x = p[0] * cosA - p[2] * sinA;
	        // var z = p[0] * sinA + p[2] * cosA;
	        //
	        // vec3.add(camera.position, camera.position, [x, 0, z]);
	        //
	        // // var x = camera.position[0] * cosA - camera.position[2] * sinA;
	        // // var z = camera.position[0] * sinA + camera.position[2] * cosA;
	        //
	        // // camera.position[0] = x;
	        // // camera.position[2] = z;
	        //
	        // var lookAt = mat4.create();
	        // mat4.lookAt(lookAt, camera.position, [0, 0, 0], [0, 1, 0]);
	        // mat4.getRotation(camera.rotation, lookAt);

	    }

	    exit() {

	    }

	}

	module.exports = SplashScene;

/***/ },
/* 23 */
/***/ function(module, exports) {

	module.exports = {

	    totalTime: 0,
	    deltaTime: 0,
	    lastTime: 0,

	    update(timestamp) {
	        this.deltaTime = (timestamp - this.lastTime) / 1000.0;
	        this.totalTime += this.deltaTime;
	        this.lastTime = timestamp;
	    }
	};

/***/ },
/* 24 */
/***/ function(module, exports) {

	class GameScene {

	    constructor(name, gameManager) {
	        this.name = name;
	        this.gameManager = gameManager;
	    }

	    enter() { }

	    update() { }

	    exit() { }

	}

	module.exports = GameScene;

/***/ },
/* 25 */
/***/ function(module, exports) {

	const RadConstant = Math.PI / 180;
	const DegreeConstant = 180 / Math.PI;

	module.exports = {

	    degToRad(degrees) {
	        return degrees * RadConstant;
	    },

	    radToDeg(radians) {
	        return radians * DegreeConstant;
	    },

	    clamp(input, min, max) {
	        if (input < min) input = min;
	        if (input > max) input = max;
	        return input;
	    }

	};

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	const GameScene = __webpack_require__(24);
	const Time = __webpack_require__(23);
	const vec3 = __webpack_require__(4).vec3;

	class GameStartScene extends GameScene {

	    constructor(gameManager) {
	        super("GameStart", gameManager);
	        this.destPoint = vec3.fromValues(0, 2, 16);
	    }


	    enter() {
	        this.gameManager.showSplashScreen = false;
	    }

	    update() {
	        const camera = this.gameManager.camera;
	        vec3.lerp(camera.position, camera.position, this.destPoint, Time.deltaTime * 5);
	        if (vec3.equals(camera.position, this.destPoint)) {
	            this.gameManager.endScene();
	        }
	    }

	}

	module.exports = GameStartScene;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	const GameScene = __webpack_require__(24);

	class GameSummaryScene extends GameScene {

	    constructor(sceneManager) {
	        super("GamePlay", sceneManager);
	    }

	}

	module.exports = GameSummaryScene;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	const GameScene = __webpack_require__(24);
	const Constants = __webpack_require__(15);
	const MouseButton = __webpack_require__(19);
	const Vec3 = __webpack_require__(16).Vec3;
	const Time = __webpack_require__(23);

	var pt1 = new Vec3(2, 0.5, 12);
	var pt2 = new Vec3(-2, 0.5, 12);

	const TurnState = {
	    RollSelect: 0,
	    BallRolling: 1
	};

	class PlayerTurnScene extends GameScene {

	    constructor(gameManager) {
	        super("PlayerTurn", gameManager);
	        this.ball = null;
	        this.oscilationPoint = pt1;
	        this.state = TurnState.RollSelect;
	    }

	    enter() {
	        this.initRoll();
	        this.gameManager.showPlayerTurnMessage = true;
	        setTimeout(() => {
	            this.gameManager.showPlayerTurnMessage = false;
	        }, 1000);
	    }

	    initRoll() {
	        this.state = TurnState.RollSelect;
	        this.gameManager.root.findChildren("pin");
	        this.ball = this.gameManager.root.findChild("ball");
	        this.ball.position = [0, 0.5, 12];
	        this.ball.rigidBody.position = Constants.GetBallResetPosition();
	        this.ball.rigidBody.velocity = new Vec3(0, 0, 0);
	        this.ball.rigidBody.force = new Vec3(0, 0, 0);
	        this.gameManager.physics.removeBody(this.ball.rigidBody);
	        //todo reset pins
	    }

	    update() {
	        const turnManager = this.gameManager.turnManager;

	        switch (this.state) {
	            case TurnState.RollSelect:
	                this.oscillateBall();
	                if (this.gameManager.input.getMouseButton(MouseButton.Left)) {
	                    this.launchBall();
	                }
	                break;
	            case TurnState.BallRolling:
	                if (this.ball.rigidBody.position.y < -5) {
	                    var randomPins = Math.random() * 11;
	                    randomPins = randomPins | 0;
	                    console.log("got ", randomPins);
	                    turnManager.recordScore(randomPins);
	                    if (turnManager.currentPlayer.scoreKeeper.isCurrentRollingCompleted) {
	                        console.log("Done rolling");
	                        this.gameManager.endScene();
	                    }
	                    else {
	                        this.initRoll();
	                    }
	                }
	                break;
	        }
	    }

	    exit() {
	    }

	    launchBall() {
	        this.state = TurnState.BallRolling;
	        this.gameManager.physics.addBody(this.ball.rigidBody);
	        this.ball.rigidBody.applyImpulse(new Vec3(0, 0, -100), this.ball.rigidBody.position.vsub({
	            x: 0, y: 0, z: 0.25
	        }));
	    }

	    oscillateBall() {
	        if (this.oscilationPoint === pt1) {
	            this.ball.rigidBody.position.x += Time.deltaTime * 2;
	            if (this.ball.rigidBody.position.x >= pt1.x) {
	                this.oscilationPoint = pt2;
	            }
	        }
	        else if (this.oscilationPoint === pt2) {
	            this.ball.rigidBody.position.x -= Time.deltaTime * 2;
	            if (this.ball.rigidBody.position.x <= pt2.x) {
	                this.oscilationPoint = pt1;
	            }
	        }
	    }
	}

	module.exports = PlayerTurnScene;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	const GameScene = __webpack_require__(24);

	class FrameScene extends GameScene {

	    constructor(gameManager) {
	        super("FrameScene", gameManager);
	    }

	    enter() {
	        this.gameManager.showScoreboard = true;
	        setTimeout(() => {
	            this.gameManager.showScoreboard = false;
	            this.gameManager.endScene();
	        }, 1500);
	    }
	}

	module.exports = FrameScene;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	const GameEvent = __webpack_require__(18);
	const EventEmitter = __webpack_require__(20);

	class TurnManager extends EventEmitter {

	    constructor(players) {
	        super();
	        this.players = players;
	        this.currentPlayerIdx = 0;
	        this.currentFrameNumber = 0;
	        this.totalFrames = 10;
	    }

	    startGame(frameCount) {
	        this.totalFrames = frameCount || 10;
	        this.currentPlayerIdx = 0;
	        this.currentFrameNumber = 0;
	        for(var i = 0; i < this.players.length; i++) {
	            this.players[i].scoreKeeper.beginNewGame(this.totalFrames);
	        }
	        this.beginFrame();
	    }

	    beginFrame() {
	        this.currentFrameNumber++;
	        this.emit(GameEvent.BeginFrame, this.currentFrameNumber);
	        this.beginTurn();
	    }

	    beginTurn() {
	        this.emit(GameEvent.BeginTurn, this.currentPlayer, this.currentFrameNumber);
	        this.currentPlayer.scoreKeeper.beginNewFrame();
	    }

	    recordScore(pins) {
	        //dont record points if the game is over
	        if(this.isGameOver) return;
	        const scoreKeeper = this.currentPlayer.scoreKeeper;
	        scoreKeeper.recordScore(pins);
	        //if we are done rolling, end the turn. Note for the last frame
	        //this could be up to 3 rolls.
	        if (scoreKeeper.isCurrentRollingCompleted) {
	            this.endTurn();
	        }
	    }

	    endTurn() {
	        this.emit(GameEvent.EndTurn, this.currentPlayer, this.currentFrameNumber);
	        this.currentPlayerIdx = ++this.currentPlayerIdx % this.players.length;
	        //when we wrap around to the first player again we know the frame is over.
	        //if the frame isn't completed, start the next player's turn
	        if (this.currentPlayerIdx === 0) {
	            this.endFrame();
	        }
	        else {
	            this.beginTurn();
	        }
	    }

	    endFrame() {
	        this.emit(GameEvent.EndFrame, this.currentFrameNumber);
	        if (!this.isGameOver) {
	            this.beginFrame();
	        }
	    }

	    get isGameOver() {
	        return this.currentFrameNumber >= this.totalFrames
	            && this.players.every(function (player) {
	                return player.scoreKeeper.isCurrentRollingCompleted;
	            });
	    }

	    get currentPlayer() {
	        return this.players[this.currentPlayerIdx];
	    }
	}

	module.exports = TurnManager;

/***/ },
/* 31 */
/***/ function(module, exports) {

	
	class SceneManager {

	    constructor() {
	        this.currentSceneIndex = 0;
	        this.sceneFlow = [];
	    }

	    beginScene() {
	        this.currentScene.enter();
	    }

	    update() {
	        this.currentScene.update();
	    }

	    endScene() {
	        this.currentScene.exit();
	        this.currentSceneIndex = ++this.currentSceneIndex % this.sceneFlow.length;
	        this.beginScene();
	    }

	    get currentScene() {
	        return this.sceneFlow[this.currentSceneIndex];
	    }
	}

	module.exports = SceneManager;




/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	const ScoreKeeper = __webpack_require__(33);

	class Player {

	    constructor(name) {
	        this.scoreKeeper = new ScoreKeeper();
	    }

	}

	module.exports = Player;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	const ScoreFrame = __webpack_require__(34);

	class ScoreKeeper {

	    constructor() {
	        this.currentFrameIndex = -1;
	        this.frames = [];
	        this.pendingList = [];
	    }

	    beginNewGame(frameCount) {
	        this.currentFrameIndex = -1;
	        this.frames = new Array(frameCount);
	        for (var i = 0; i < frameCount; i++) {
	            this.frames[i] = new ScoreFrame(i === frameCount - 1);
	        }
	    }

	    beginNewFrame() {
	        this.currentFrameIndex++;
	        this.pendingList.push(this.frames[this.currentFrameIndex]);
	    }

	    recordScore(pins) {
	        for(var i = 0; i < this.pendingList.length; i++) {
	            const pendingFrame = this.pendingList[i];
	            pendingFrame.scoreRoll(pins);

	            if(pendingFrame.isScoringCompleted) {
	                this.pendingList.splice(i--, 1);
	            }
	        }
	    }

	    get totalScore() {
	        return this.frames.reduce(function(prev, current, idx, array) {
	            return prev + array[idx].score;
	        }, 0);
	    }

	    get isCurrentRollingCompleted() {
	        return this.frames[this.currentFrameIndex].isRollingCompleted;
	    }

	    get isCurrentScoringCompleted() {
	        return this.frames[this.currentFrameIndex].isScoringCompleted;
	    }

	    get currentFrame() {
	        return this.frames[this.currentFrameIndex];
	    }

	}

	module.exports = ScoreKeeper;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	const clamp = __webpack_require__(25).clamp;
	const FrameResult = __webpack_require__(17);

	class ScoreFrame {

	    constructor(isLastFrame) {
	        this.isLastFrame = isLastFrame;
	        this.frameResult = FrameResult.Pending;
	        this.totalRolls = 0;
	        this.score = 0;
	    }

	    scoreRoll(pinCount) {
	        this.totalRolls++;
	        this.score += clamp(pinCount, 0, 10);
	        if (this.frameResult === FrameResult.Pending) {

	            if (this.score === 10 && this.totalRolls === 1) {
	                this.frameResult = FrameResult.Strike;
	            }
	            else if (this.score === 10 && this.totalRolls === 2) {
	                this.frameResult = FrameResult.Spare;
	            }
	            else if (this.totalRolls === 2) {
	                this.frameResult = FrameResult.Open;
	            }
	        }
	    }

	    get isScoringCompleted() {
	        if(this.isSpare || this.isStrike) return this.totalRolls === 3;
	        return !this.isPending;
	    }

	    get isRollingCompleted() {
	        if(this.isLastFrame) {
	            var targetRolls = (this.isStrike || this.isSpare) ? 3 : 2;
	            return targetRolls === this.totalRolls;
	        }
	        else {
	            return !this.isPending;
	        }
	    }

	    get isStrike() {
	        return this.frameResult === FrameResult.Strike;
	    }

	    get isSpare() {
	        return this.frameResult === FrameResult.Spare;
	    }

	    get isPending() {
	        return this.frameResult === FrameResult.Pending;
	    }

	    get isOpen() {
	        return this.frameResult === FrameResult.Open;
	    }

	}

	module.exports = ScoreFrame;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	const MouseButton = __webpack_require__(19);

	const MinDragRadius = 8;

	class Input {

	    constructor() {

	        this.mouseX = 0;
	        this.mouseY = 0;
	        this.lastMouseX = 0;
	        this.lastMouseY = 0;
	        this.dragOriginX = 0;
	        this.dragOriginY = 0;
	        this.isDragging = false;
	        this.mouseState = MouseButton.None;
	        this.lastMouseState = MouseButton.None;
	        this.boundMouseHandler = (evt) => {
	            this.handleMouseEvent(evt);
	        };
	        //todo handle enter / exit
	        document.addEventListener("mousedown", this.boundMouseHandler, false);
	        document.addEventListener("mousemove", this.boundMouseHandler, false);
	        document.addEventListener("mouseup", this.boundMouseHandler, false);
	    }

	    handleMouseEvent(evt) {
	        this.lastMouseX = this.mouseX;
	        this.lastMouseY = this.mouseY;
	        this.mouseX = evt.clientX;
	        this.mouseY = evt.clientY;
	        this.mouseState = evt.buttons;
	        evt.stopPropagation();
	        evt.preventDefault();
	    }

	    getMouseButton(button) {
	        return (this.mouseState & button) !== 0;
	    }

	    getMouseButtonDown(button) {
	        return (this.mouseState & button) !== 0 && (this.lastMouseState & button) === 0;
	    }

	    getMouseButtonUp(button) {
	        return (this.mouseState & button) === 0 && (this.lastMouseState & button) !== 0;
	    }

	    processInput() {
	        if (!this.isDragging && this.getMouseButtonDown(MouseButton.Left)) {
	            this.dragOriginX = this.mouseX;
	            this.dragOriginY = this.mouseY;
	        }
	        if (!this.isDragging && this.getMouseButton(MouseButton.Left)) {
	            var distX = (this.dragOriginX - this.mouseX);
	            var distY = (this.dragOriginY - this.mouseY);
	            this.isDragging = (distX * distX + distY * distY) >= MinDragRadius * MinDragRadius;
	        }
	        if (this.getMouseButtonUp(MouseButton.Left)) {
	            this.isDragging = false;
	            this.dragOriginX = 0;
	            this.dragOriginY = 0;
	        }

	        this.lastMouseState = this.mouseState;
	    }

	}

	module.exports = Input;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	 __webpack_require__(2).initGL("render-surface");

	// const Time = require("./time");
	// const Camera = require("./camera");
	// const mat4 = require("gl-matrix").mat4;
	// const vec3 = require("gl-matrix").vec3;
	// const quat = require("gl-matrix").quat;
	// const degToRad = require("./util").degToRad;
	// const ResourceManager = require("./resource_manager");
	// const Scene = require("./test_scene");
	//
	// const canvas = GLUtil.getCanvas();
	// canvas.width = window.innerWidth;
	// canvas.height = window.innerHeight;
	//
	// ResourceManager.readyPromise.then(() => {
	//
	//     const scene = Scene.load();
	//     const sceneRoot = scene.root;
	//     const scenePhysics = scene.physicsWorld;
	//
	//     const identityMatrix = mat4.create();
	//     const camera = new Camera();
	//     const gl = GLUtil.getGl();
	//     resize(GLUtil.getGl(), camera);
	//
	//     gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
	//     gl.clearColor(0.2, 0.2, 0.2, 1.0);
	//
	//     (function tick(timestamp) {
	//         Time.update(timestamp);
	//         requestAnimationFrame(tick);
	//         scenePhysics.step(1.0 / 60.0, Time.deltaTime, 3);
	//         sceneRoot.update();
	//         camera.update();
	//         render();
	//     })();
	//
	//     function render() {
	//         gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	//         gl.enable(gl.DEPTH_TEST);
	//         gl.enable(gl.CULL_FACE); //material dependent
	//
	//         var inv = camera.getMatrix();
	//         mat4.invert(inv, inv);
	//         sceneRoot.render(identityMatrix, inv, camera.projectionMatrix);
	//     }
	//
	//     const scratch = vec3.create();
	//     window.cameraSpeed = 15;
	//     const canvas = GLUtil.getCanvas();
	//     document.addEventListener("keypress", keyFn);
	//     document.addEventListener("keydown", keyFn);
	//
	//     function keyFn(evt) {
	//         vec3.set(scratch, 0, 0, 0);
	//         if (evt.keyCode === 87) { //w
	//             vec3.scale(scratch, camera.getForward(), -window.cameraSpeed * Time.deltaTime);
	//             //position = position + forward * delta
	//             vec3.add(camera.position, camera.position, scratch);
	//         }
	//         else if (evt.keyCode === 83) { //s
	//             vec3.scale(scratch, camera.getForward(), window.cameraSpeed * Time.deltaTime);
	//             vec3.add(camera.position, camera.position, scratch);
	//         }
	//         if (evt.keyCode === 65) { //a
	//             vec3.scale(scratch, camera.getRight(), -window.cameraSpeed * Time.deltaTime);
	//             vec3.add(camera.position, camera.position, scratch);
	//         }
	//         else if (evt.keyCode === 68) {//d
	//             vec3.scale(scratch, camera.getRight(), window.cameraSpeed * Time.deltaTime);
	//             vec3.add(camera.position, camera.position, scratch);
	//         }
	//
	//         if (evt.keyCode === 81) { //q
	//             quat.rotateY(camera.rotation, camera.rotation, degToRad(5));
	//         }
	//         else if (evt.keyCode === 69) { //e
	//             quat.rotateY(camera.rotation, camera.rotation, -degToRad(5));
	//         }
	//     }
	//
	//     window.addEventListener("resize", function () {
	//         resize(GLUtil.getGl(), camera);
	//     });
	//
	//
	// });
	//
	//


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	const Vue = __webpack_require__(38);
	const ResourceManager = __webpack_require__(40);
	const GameManager = __webpack_require__(21);
	const SceneObject = __webpack_require__(14);
	const Physics = __webpack_require__(16);
	const Constants = __webpack_require__(15);
	const vec3 = __webpack_require__(4).vec3;
	const PinPositions = Constants.PinPositions;
	const GetBallResetPosition = Constants.GetBallResetPosition;

	ResourceManager.readyPromise.then(() => {

	    const gameManager = new GameManager();

	    var alley = new SceneObject(gameManager.root, "alley");
	    alley.model = ResourceManager.getModel("cube.json");
	    alley.material = ResourceManager.getMaterial("default");
	    alley.scale = vec3.fromValues(5, 0.2, 25);
	    alley.rigidBody = new Physics.Body({
	        mass: 0,// mass == 0 makes the body static
	        shape: new Physics.Box(new Physics.Vec3(2.5, 0.1, 12)),
	        position: new Physics.Vec3(0, -0.5, 0) //need this collider lower than its mesh
	    });

	    var ball = new SceneObject(gameManager.root, "ball");
	    ball.model = ResourceManager.getModel("sphere.json");
	    ball.scale = vec3.fromValues(0.5, 0.5, 0.5);
	    ball.material = ResourceManager.getMaterial("ball.mat");
	    ball.rigidBody = new Physics.Body({
	        mass: 5, // kg
	        position: GetBallResetPosition(),
	        shape: new Physics.Sphere(0.5)
	    });

	    gameManager.physics.addBody(ball.rigidBody);
	    gameManager.physics.addBody(alley.rigidBody);

	    for (var i = 0; i < 10; i++) {
	        var pin = new SceneObject(gameManager.root, "pin");
	        pin.model = ResourceManager.getModel("pin.json");
	        pin.material = ResourceManager.getMaterial("pin.mat");
	        pin.setPosition(PinPositions[i][0], PinPositions[i][1], PinPositions[i][2]);
	        pin.scale = vec3.fromValues(0.5, 0.5, 0.5);
	        // var cylinderBody = new Physics.Box(new Physics.Vec3(0.2, 0.2, 0.2));//(0.1, 0.1, 2, 5) //todo this aint right, cant visualize it
	        //
	        // pin.rigidBody = new Physics.Body({
	        //     mass: 1,
	        //     position: new Physics.Vec3(pinPositions[i][0], pinPositions[i][1], pinPositions[i][2]),
	        //     shape: cylinderBody
	        // });
	        //
	        // gameManager.physics.addBody(pin.rigidBody);
	    }

	    new Vue({
	        el: "#app-root",
	        data: function () {
	           return { gameManager }
	        },
	        components: {
	            splash: __webpack_require__(52)
	        }
	    });
	});


	// splash
	//     select players
	//     camera orbit
	//     occasional ball auto played
	//
	// game start
	//     lerp back to alley
	//     wait 2s
	//
	// frame start
	//     turn start
	//     turn update
	//     turn end
	// frame end
	//
	// game end

	//load resources
	//new scene manager
	//sceneflow.start

/***/ },
/* 38 */,
/* 39 */,
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	const GLUtil = __webpack_require__(2);
	const Model = __webpack_require__(41);
	const Material = __webpack_require__(42);

	class ResourceManager {

	    constructor() {
	        this.shaders = {};
	        this.models = {};
	        this.materials = {};
	        this.textures = {};
	        this.textureRequests = {};
	        this.promises = [];
	        this.readyPromise = Promise.resolve();
	    }

	    init() {
	        this.readyPromise = this.readyPromise.then(Promise.all(this.promises));
	    }

	    setShader(id, vertSrc, fragSrc) {
	        this.shaders[id] = GLUtil.createShaderProgram(vertSrc, fragSrc);
	    }

	    setModel(id, src) {
	        this.models[id] = new Model(src);
	    }

	    setTexture(id, texturePromise) {
	        this.promises.push(texturePromise.then((texture) => {
	            this.textures[id] = texture;
	            if(this.textureRequests[id]) {
	                for(var i = 0; i < this.textureRequests[id].length; i++) {
	                    this.textureRequests[id][i](texture);
	                }
	                this.textureRequests[id] = null;
	            }
	        }));
	    }

	    setMaterial(id, materialSrc) {
	        var material = new Material(this.getShader("default"));
	         for(var i = 0; i < materialSrc.textures.length; i++) {
	             var textData = materialSrc.textures[i];
	             var textureId = textData.id;
	             var texturePath = textData.path;
	             this.setTexture(textureId, GLUtil.loadTexture(texturePath));
	             this.textureRequests[textureId] = this.textureRequests[textureId] || [];
	             this.textureRequests[textureId].push((texture) => {
	                 material.mainTexture = texture; //todo support more texture
	             });
	         }
	        this.materials[id] = material;
	    }

	    getModel(modelId) {
	        return this.models[modelId];
	    }

	    getMaterial(materialId) {
	        return this.materials[materialId];
	    }

	    getShader(shaderId) {
	        return this.shaders[shaderId];
	    }

	    getTexture(textureId) {
	        return this.textures[textureId];
	    }

	}

	var manager = new ResourceManager();
	manager.setShader("default", __webpack_require__(43), __webpack_require__(44));
	manager.setModel("cube.json", __webpack_require__(45));
	manager.setModel("quad.json", __webpack_require__(46));
	manager.setModel("sphere.json", __webpack_require__(47));
	manager.setModel("pin.json", __webpack_require__(48));
	manager.setMaterial("default", __webpack_require__(49));
	manager.setMaterial("pin.mat", __webpack_require__(50));
	manager.setMaterial("ball.mat", __webpack_require__(51));

	manager.init();

	module.exports = manager;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	const GLUtil = __webpack_require__(2);
	const GLBuffer = __webpack_require__(1);

	class Model {

	    constructor(modelJSON) {

	        const vertices = modelJSON.meshes[0].vertices;
	        const indices = modelJSON.meshes[0].indices;
	        const normals = modelJSON.meshes[0].normals;
	        const uvs = modelJSON.meshes[0].uvs;

	        const gl = GLUtil.getGl();

	        this.vertexBuffer = new GLBuffer();
	        this.indexBuffer = new GLBuffer();
	        this.uvBuffer = new GLBuffer();
	        this.normalBuffer = new GLBuffer();

	        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer.glBuffer);
	        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	        this.vertexBuffer.itemSize = 3;
	        this.vertexBuffer.numItems = vertices.length;

	        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer.glBuffer);
	        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);
	        this.normalBuffer.itemSize = 3;
	        this.normalBuffer.numItems = normals.length;

	        gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer.glBuffer);
	        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(uvs), gl.STATIC_DRAW);
	        this.uvBuffer.itemSize = 2;
	        this.uvBuffer.itemCount = uvs.length;

	        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer.glBuffer);
	        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
	        this.indexBuffer.itemSize = 1;
	        this.indexBuffer.itemCount = indices.length;

	    }


	}

	module.exports = Model;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	const GLUtil = __webpack_require__(2);

	class Material {

	    constructor(shaderProgram) {
	        const gl = GLUtil.getGl();
	        this.program = shaderProgram;
	        this.shaderPointers = {};
	        this.mainTexture = null;

	        this.shaderPointers.aVertexPosition = gl.getAttribLocation(this.program, "aVertexPosition");
	        this.shaderPointers.aTextureCoord = gl.getAttribLocation(this.program, "aTextureCoord");
	        this.shaderPointers.uPMatrix = gl.getUniformLocation(this.program, "uPMatrix");
	        this.shaderPointers.uMVMatrix = gl.getUniformLocation(this.program, "uMVMatrix");
	        this.shaderPointers.uSampler = gl.getUniformLocation(this.program, "uSampler");
	        this.shaderPointers.uTextureTiling = gl.getUniformLocation(this.program, "uTextureTiling");
	        this.shaderPointers.uNormalMatrix = gl.getUniformLocation(this.program, "uNormalMatrix");

	    }

	}

	module.exports = Material;

/***/ },
/* 43 */
/***/ function(module, exports) {

	module.exports = "\r\nattribute vec3 aVertexPosition;\r\nattribute vec3 aNormalPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat4 uMVMatrix;\r\nuniform mat4 uPMatrix;\r\n//uniform mat4 uNormalMatrix;\r\n\r\n//varying vec3 vNormal;\r\nvarying vec3 vPosition;\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void) {\r\n    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\r\n    //vec4 unprojectedPosition = uMVMatrix * vec4(aVertexPosition, 1);\r\n    //vNormal = vec3(uNormalMatrix * vec4(aNormalPosition, 0));\r\n    vTextureCoord = aTextureCoord;\r\n}"

/***/ },
/* 44 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\nuniform vec2 uTextureTiling;\r\n\r\n//precision mediump float;\r\n//precision mediump int;\r\n//\r\n//uniform vec3 u_lightColor;\r\n//uniform vec3 u_lightDir;\r\n//uniform vec3 u_lightPos;\r\n//uniform vec3 u_viewPos;\r\n//uniform vec3 u_diffuseColor;\r\n//uniform float u_roughness;\r\n//uniform float u_fresnel;\r\n//uniform float u_alpha;\r\n//uniform vec3 u_ambientColor;\r\n//uniform samplerCube u_tCube;\r\n//uniform float u_time;\r\n//varying vec4 vPosition;\r\n//varying vec3 vViewPosition;\r\n//varying vec4 vNormal;\r\n//varying vec3 vViewNormal;\r\n//varying vec2 vUv;\r\n//\r\n//#define M_PI 3.1415926535897932384626433832795\r\n//\r\n//float dotClamped(vec3 a, vec3 b) {\r\n//    return max(dot(a,b), 0.0);\r\n//}\r\n//\r\n//float F(float f0, vec3 l, vec3 h) {\r\n//    float LoH = dot(l,h);\r\n//    float powTerm = (-5.55473 * LoH - 6.98316) * LoH;\r\n//    return f0 + (1.0 - f0) * pow(2.0, powTerm);\r\n//}\r\n//\r\n//float N(float a, vec3 n, vec3 h, float NoH) {\r\n//    float a2 = a*a;\r\n//    return a2 / (4.0 * pow(pow(NoH, 2.0) * (a2 - 1.0) + 1.0, 2.0));\r\n//}\r\n//\r\n//float G(float a, vec3 l, vec3 v, vec3 h, vec3 n, float NoL, float NoV) {\r\n//    float VdotH = max(dot(v,h), 0.0);\r\n//    float NdotH = max(dot(n,h), 0.0);\r\n//    float minV = 2.0 * NdotH * min(NoV, NoL) / VdotH;\r\n//    return min(1.0, minV);\r\n//}\r\n\r\nvoid main(void) {\r\n    vec2 texCoord = vTextureCoord * uTextureTiling;\r\n    vec4 albedo = texture2D(uSampler, texCoord);\r\n    gl_FragColor = albedo;\r\n}\r\n\r\n//param, normal dist, shadowing, main"

/***/ },
/* 45 */
/***/ function(module, exports) {

	module.exports = {
		"meshes": [
			{
				"indices": [
					0,
					2,
					3,
					0,
					3,
					1,
					8,
					4,
					5,
					8,
					5,
					9,
					10,
					6,
					7,
					10,
					7,
					11,
					12,
					13,
					14,
					12,
					14,
					15,
					16,
					17,
					18,
					16,
					18,
					19,
					20,
					21,
					22,
					20,
					22,
					23
				],
				"vertices": [
					0.5,
					-0.5,
					0.5,
					-0.5,
					-0.5,
					0.5,
					0.5,
					0.5,
					0.5,
					-0.5,
					0.5,
					0.5,
					0.5,
					0.5,
					-0.5,
					-0.5,
					0.5,
					-0.5,
					0.5,
					-0.5,
					-0.5,
					-0.5,
					-0.5,
					-0.5,
					0.5,
					0.5,
					0.5,
					-0.5,
					0.5,
					0.5,
					0.5,
					0.5,
					-0.5,
					-0.5,
					0.5,
					-0.5,
					0.5,
					-0.5,
					-0.5,
					0.5,
					-0.5,
					0.5,
					-0.5,
					-0.5,
					0.5,
					-0.5,
					-0.5,
					-0.5,
					-0.5,
					-0.5,
					0.5,
					-0.5,
					0.5,
					0.5,
					-0.5,
					0.5,
					-0.5,
					-0.5,
					-0.5,
					-0.5,
					0.5,
					-0.5,
					-0.5,
					0.5,
					0.5,
					-0.5,
					0.5,
					0.5,
					0.5,
					0.5,
					-0.5,
					0.5
				],
				"uvs": [
					0,
					0,
					1,
					0,
					0,
					1,
					1,
					1,
					0,
					1,
					1,
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					1,
					1,
					1,
					0,
					0,
					0,
					0,
					1,
					1,
					1,
					1,
					0,
					0,
					0,
					0,
					1,
					1,
					1,
					1,
					0
				],
				"normals": [
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0
				]
			}
		]
	};

/***/ },
/* 46 */
/***/ function(module, exports) {

	module.exports = {
		"meshes": [
			{
				"indices": [
					0,
					1,
					2,
					1,
					0,
					3
				],
				"vertices": [
					-0.5,
					-0.5,
					-3.061617e-17,
					0.5,
					0.5,
					3.061617e-17,
					0.5,
					-0.5,
					-3.061617e-17,
					-0.5,
					0.5,
					3.061617e-17
				],
				"uvs": [
					0,
					0,
					1,
					1,
					1,
					0,
					0,
					1
				],
				"normals": [
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1
				]
			}
		]
	};

/***/ },
/* 47 */
/***/ function(module, exports) {

	module.exports = {
		"meshes": [
			{
				"indices": [
					0,
					1,
					2,
					0,
					2,
					3,
					3,
					2,
					4,
					3,
					4,
					5,
					5,
					4,
					6,
					5,
					6,
					7,
					7,
					6,
					8,
					7,
					8,
					9,
					1,
					10,
					2,
					1,
					11,
					10,
					2,
					10,
					12,
					2,
					12,
					4,
					4,
					12,
					13,
					4,
					13,
					6,
					6,
					13,
					14,
					6,
					14,
					8,
					11,
					15,
					10,
					11,
					16,
					15,
					10,
					15,
					17,
					10,
					17,
					12,
					12,
					17,
					18,
					12,
					18,
					13,
					13,
					18,
					19,
					13,
					19,
					14,
					16,
					20,
					15,
					16,
					21,
					20,
					15,
					20,
					22,
					15,
					22,
					17,
					17,
					22,
					23,
					17,
					24,
					18,
					18,
					23,
					25,
					18,
					26,
					19,
					14,
					19,
					27,
					14,
					27,
					28,
					28,
					27,
					29,
					28,
					29,
					30,
					30,
					29,
					31,
					30,
					31,
					32,
					32,
					31,
					33,
					32,
					33,
					34,
					35,
					32,
					34,
					35,
					34,
					36,
					37,
					35,
					36,
					37,
					36,
					38,
					31,
					39,
					33,
					31,
					40,
					39,
					29,
					40,
					31,
					41,
					35,
					37,
					41,
					42,
					35,
					42,
					30,
					32,
					42,
					32,
					35,
					29,
					43,
					40,
					44,
					42,
					41,
					44,
					45,
					42,
					45,
					30,
					42,
					45,
					28,
					30,
					9,
					45,
					44,
					9,
					8,
					45,
					8,
					28,
					45,
					8,
					14,
					28,
					27,
					46,
					43,
					27,
					43,
					29,
					19,
					46,
					27,
					19,
					47,
					46,
					48,
					49,
					50,
					48,
					50,
					51,
					51,
					50,
					52,
					51,
					52,
					53,
					53,
					52,
					54,
					53,
					54,
					55,
					55,
					54,
					56,
					55,
					56,
					57,
					49,
					58,
					50,
					49,
					59,
					58,
					50,
					58,
					60,
					50,
					60,
					52,
					52,
					60,
					61,
					52,
					61,
					54,
					54,
					61,
					62,
					54,
					62,
					56,
					59,
					63,
					58,
					59,
					64,
					63,
					58,
					63,
					65,
					58,
					65,
					60,
					60,
					65,
					66,
					60,
					66,
					61,
					61,
					66,
					67,
					61,
					67,
					62,
					64,
					68,
					63,
					64,
					69,
					68,
					63,
					68,
					70,
					63,
					70,
					65,
					65,
					70,
					71,
					65,
					71,
					66,
					66,
					71,
					72,
					66,
					73,
					67,
					62,
					67,
					74,
					62,
					74,
					75,
					75,
					74,
					76,
					75,
					76,
					77,
					77,
					76,
					78,
					77,
					78,
					79,
					79,
					78,
					80,
					79,
					80,
					81,
					82,
					79,
					81,
					82,
					81,
					83,
					84,
					82,
					83,
					84,
					83,
					85,
					78,
					21,
					80,
					78,
					20,
					21,
					76,
					20,
					78,
					86,
					82,
					84,
					86,
					87,
					82,
					87,
					77,
					79,
					87,
					79,
					82,
					76,
					22,
					20,
					88,
					87,
					86,
					88,
					89,
					87,
					89,
					77,
					87,
					89,
					75,
					77,
					57,
					89,
					88,
					57,
					56,
					89,
					56,
					75,
					89,
					56,
					62,
					75,
					74,
					23,
					22,
					74,
					22,
					76,
					67,
					90,
					23,
					67,
					91,
					74,
					92,
					93,
					94,
					92,
					94,
					95,
					95,
					94,
					96,
					95,
					96,
					97,
					97,
					96,
					98,
					97,
					98,
					99,
					99,
					98,
					100,
					99,
					100,
					101,
					93,
					102,
					94,
					93,
					103,
					102,
					94,
					102,
					104,
					94,
					104,
					96,
					96,
					104,
					105,
					96,
					105,
					98,
					98,
					105,
					106,
					98,
					106,
					100,
					103,
					107,
					102,
					103,
					108,
					107,
					102,
					107,
					109,
					102,
					109,
					104,
					104,
					109,
					110,
					104,
					110,
					105,
					105,
					110,
					111,
					105,
					111,
					106,
					108,
					112,
					107,
					108,
					113,
					112,
					107,
					112,
					114,
					107,
					114,
					109,
					109,
					114,
					115,
					109,
					115,
					110,
					110,
					115,
					116,
					110,
					117,
					111,
					106,
					111,
					118,
					106,
					118,
					119,
					119,
					118,
					120,
					119,
					120,
					121,
					121,
					120,
					122,
					121,
					122,
					123,
					123,
					122,
					124,
					123,
					124,
					125,
					126,
					123,
					125,
					126,
					125,
					127,
					128,
					126,
					127,
					128,
					127,
					129,
					122,
					130,
					124,
					122,
					131,
					130,
					120,
					131,
					122,
					132,
					126,
					128,
					132,
					133,
					126,
					133,
					121,
					123,
					133,
					123,
					126,
					120,
					134,
					131,
					135,
					133,
					132,
					135,
					136,
					133,
					136,
					121,
					133,
					136,
					119,
					121,
					101,
					136,
					135,
					101,
					100,
					136,
					100,
					119,
					136,
					100,
					106,
					119,
					137,
					130,
					131,
					137,
					131,
					138,
					138,
					131,
					134,
					139,
					137,
					138,
					139,
					138,
					140,
					141,
					139,
					140,
					141,
					140,
					142,
					143,
					141,
					142,
					143,
					142,
					144,
					144,
					142,
					145,
					144,
					145,
					146,
					146,
					145,
					147,
					146,
					147,
					148,
					148,
					147,
					149,
					148,
					149,
					150,
					142,
					140,
					151,
					142,
					151,
					145,
					145,
					151,
					152,
					145,
					152,
					147,
					147,
					152,
					153,
					147,
					153,
					149,
					140,
					138,
					154,
					140,
					154,
					151,
					151,
					154,
					155,
					151,
					155,
					152,
					152,
					155,
					156,
					152,
					156,
					153,
					154,
					157,
					155,
					154,
					134,
					157,
					118,
					157,
					134,
					118,
					134,
					120,
					111,
					157,
					118,
					111,
					158,
					157,
					138,
					134,
					154,
					155,
					157,
					159,
					155,
					160,
					156,
					161,
					162,
					163,
					161,
					163,
					164,
					162,
					165,
					163,
					162,
					166,
					165,
					166,
					167,
					165,
					166,
					168,
					167,
					168,
					113,
					167,
					168,
					112,
					113,
					169,
					162,
					161,
					169,
					170,
					162,
					170,
					166,
					162,
					170,
					171,
					166,
					171,
					168,
					166,
					171,
					172,
					168,
					172,
					112,
					168,
					172,
					114,
					112,
					173,
					170,
					169,
					173,
					174,
					170,
					174,
					171,
					170,
					174,
					175,
					171,
					175,
					172,
					171,
					175,
					176,
					172,
					176,
					114,
					172,
					176,
					115,
					114,
					177,
					174,
					173,
					177,
					178,
					174,
					178,
					175,
					174,
					178,
					179,
					175,
					179,
					176,
					175,
					179,
					180,
					176,
					180,
					115,
					176,
					180,
					181,
					115,
					182,
					183,
					184,
					182,
					184,
					185,
					185,
					184,
					186,
					185,
					186,
					187,
					187,
					186,
					188,
					187,
					188,
					189,
					189,
					188,
					190,
					189,
					190,
					191,
					183,
					192,
					184,
					183,
					193,
					192,
					184,
					192,
					194,
					184,
					194,
					186,
					186,
					194,
					195,
					186,
					195,
					188,
					188,
					195,
					196,
					188,
					196,
					190,
					193,
					197,
					192,
					193,
					198,
					197,
					192,
					197,
					199,
					192,
					199,
					194,
					194,
					199,
					200,
					194,
					200,
					195,
					195,
					200,
					201,
					195,
					201,
					196,
					198,
					202,
					197,
					198,
					203,
					202,
					197,
					202,
					204,
					197,
					204,
					199,
					199,
					204,
					205,
					199,
					205,
					200,
					200,
					205,
					206,
					200,
					206,
					201,
					196,
					201,
					207,
					196,
					207,
					208,
					208,
					207,
					209,
					208,
					209,
					210,
					210,
					209,
					211,
					210,
					211,
					212,
					212,
					211,
					213,
					212,
					213,
					214,
					215,
					212,
					214,
					215,
					214,
					216,
					217,
					215,
					216,
					217,
					216,
					218,
					211,
					219,
					213,
					211,
					220,
					219,
					209,
					220,
					211,
					221,
					215,
					217,
					221,
					222,
					215,
					222,
					210,
					212,
					222,
					212,
					215,
					209,
					223,
					220,
					224,
					222,
					221,
					224,
					225,
					222,
					225,
					210,
					222,
					225,
					208,
					210,
					191,
					225,
					224,
					191,
					190,
					225,
					190,
					208,
					225,
					190,
					196,
					208,
					226,
					219,
					220,
					226,
					220,
					227,
					227,
					220,
					223,
					228,
					226,
					227,
					228,
					227,
					229,
					230,
					228,
					229,
					230,
					229,
					231,
					232,
					230,
					231,
					232,
					231,
					233,
					233,
					231,
					234,
					233,
					234,
					235,
					235,
					234,
					236,
					235,
					236,
					237,
					237,
					236,
					238,
					237,
					238,
					239,
					231,
					229,
					240,
					231,
					240,
					234,
					234,
					240,
					241,
					234,
					241,
					236,
					236,
					241,
					242,
					236,
					242,
					238,
					229,
					227,
					243,
					229,
					243,
					240,
					240,
					243,
					244,
					240,
					244,
					241,
					241,
					244,
					245,
					241,
					245,
					242,
					243,
					246,
					244,
					243,
					223,
					246,
					207,
					246,
					223,
					207,
					223,
					209,
					201,
					246,
					207,
					201,
					206,
					246,
					244,
					246,
					206,
					244,
					206,
					245,
					227,
					223,
					243,
					239,
					238,
					247,
					239,
					247,
					248,
					248,
					247,
					249,
					248,
					249,
					250,
					250,
					249,
					251,
					250,
					251,
					252,
					252,
					251,
					253,
					252,
					253,
					254,
					251,
					255,
					253,
					251,
					256,
					255,
					249,
					256,
					251,
					256,
					257,
					255,
					256,
					258,
					257,
					258,
					203,
					257,
					258,
					202,
					203,
					249,
					259,
					256,
					259,
					258,
					256,
					247,
					259,
					249,
					259,
					260,
					258,
					260,
					202,
					258,
					260,
					204,
					202,
					261,
					260,
					259,
					247,
					261,
					259,
					261,
					262,
					260,
					262,
					204,
					260,
					262,
					205,
					204,
					238,
					261,
					247,
					238,
					242,
					261,
					242,
					262,
					261,
					242,
					245,
					262,
					245,
					205,
					262,
					245,
					206,
					205,
					263,
					264,
					265,
					263,
					265,
					266,
					266,
					265,
					267,
					266,
					267,
					268,
					268,
					267,
					269,
					268,
					269,
					270,
					270,
					269,
					271,
					270,
					271,
					272,
					264,
					273,
					265,
					264,
					274,
					273,
					265,
					273,
					275,
					265,
					275,
					267,
					267,
					275,
					276,
					267,
					276,
					269,
					269,
					276,
					277,
					269,
					277,
					271,
					274,
					278,
					273,
					274,
					279,
					278,
					273,
					278,
					280,
					273,
					280,
					275,
					275,
					280,
					281,
					275,
					281,
					276,
					276,
					281,
					282,
					276,
					282,
					277,
					279,
					283,
					278,
					279,
					284,
					283,
					278,
					283,
					285,
					278,
					285,
					280,
					280,
					285,
					286,
					280,
					286,
					281,
					281,
					286,
					287,
					281,
					287,
					282,
					277,
					282,
					288,
					277,
					288,
					289,
					289,
					288,
					290,
					289,
					290,
					291,
					291,
					290,
					292,
					291,
					292,
					293,
					293,
					292,
					294,
					293,
					294,
					295,
					296,
					293,
					295,
					296,
					295,
					297,
					298,
					296,
					297,
					298,
					297,
					299,
					292,
					300,
					294,
					292,
					301,
					300,
					290,
					301,
					292,
					302,
					296,
					298,
					302,
					303,
					296,
					303,
					291,
					293,
					303,
					293,
					296,
					290,
					304,
					301,
					305,
					303,
					302,
					305,
					306,
					303,
					306,
					291,
					303,
					306,
					289,
					291,
					272,
					306,
					305,
					272,
					271,
					306,
					271,
					289,
					306,
					271,
					277,
					289,
					307,
					300,
					301,
					307,
					301,
					308,
					308,
					301,
					304,
					309,
					307,
					308,
					309,
					308,
					310,
					311,
					309,
					310,
					311,
					310,
					312,
					313,
					311,
					312,
					313,
					312,
					314,
					314,
					312,
					315,
					314,
					315,
					316,
					316,
					315,
					317,
					316,
					317,
					318,
					318,
					317,
					319,
					318,
					319,
					320,
					312,
					310,
					321,
					312,
					321,
					315,
					315,
					321,
					322,
					315,
					322,
					317,
					317,
					322,
					323,
					317,
					323,
					319,
					310,
					308,
					324,
					310,
					324,
					321,
					321,
					324,
					325,
					321,
					325,
					322,
					322,
					325,
					326,
					322,
					326,
					323,
					324,
					327,
					325,
					324,
					304,
					327,
					288,
					327,
					304,
					288,
					304,
					290,
					282,
					327,
					288,
					282,
					287,
					327,
					325,
					327,
					287,
					325,
					287,
					326,
					308,
					304,
					324,
					320,
					319,
					328,
					320,
					328,
					329,
					329,
					328,
					330,
					329,
					330,
					331,
					331,
					330,
					332,
					331,
					332,
					333,
					333,
					332,
					334,
					333,
					334,
					335,
					332,
					336,
					334,
					332,
					337,
					336,
					330,
					337,
					332,
					337,
					338,
					336,
					337,
					339,
					338,
					339,
					284,
					338,
					339,
					283,
					284,
					330,
					340,
					337,
					340,
					339,
					337,
					328,
					340,
					330,
					340,
					341,
					339,
					341,
					283,
					339,
					341,
					285,
					283,
					342,
					341,
					340,
					328,
					342,
					340,
					342,
					343,
					341,
					343,
					285,
					341,
					343,
					286,
					285,
					319,
					342,
					328,
					319,
					323,
					342,
					323,
					343,
					342,
					323,
					326,
					343,
					326,
					286,
					343,
					326,
					287,
					286,
					344,
					345,
					346,
					344,
					346,
					347,
					347,
					346,
					348,
					347,
					348,
					349,
					349,
					348,
					350,
					349,
					350,
					351,
					351,
					350,
					352,
					351,
					352,
					353,
					345,
					354,
					346,
					345,
					355,
					354,
					346,
					354,
					356,
					346,
					356,
					348,
					348,
					356,
					357,
					348,
					357,
					350,
					350,
					357,
					358,
					350,
					358,
					352,
					355,
					359,
					354,
					355,
					360,
					359,
					354,
					359,
					361,
					354,
					361,
					356,
					356,
					361,
					362,
					356,
					362,
					357,
					357,
					362,
					363,
					357,
					363,
					358,
					360,
					364,
					359,
					360,
					365,
					364,
					359,
					364,
					366,
					359,
					366,
					361,
					361,
					366,
					367,
					361,
					367,
					362,
					362,
					367,
					368,
					362,
					368,
					363,
					369,
					364,
					365,
					369,
					365,
					370,
					371,
					369,
					370,
					371,
					370,
					372,
					373,
					371,
					372,
					373,
					372,
					374,
					375,
					373,
					374,
					375,
					374,
					376,
					377,
					373,
					375,
					377,
					378,
					373,
					378,
					371,
					373,
					378,
					379,
					371,
					379,
					369,
					371,
					379,
					380,
					369,
					380,
					366,
					364,
					380,
					364,
					369,
					381,
					378,
					377,
					381,
					382,
					378,
					382,
					379,
					378,
					382,
					383,
					379,
					383,
					380,
					379,
					383,
					384,
					380,
					384,
					366,
					380,
					384,
					367,
					366,
					385,
					382,
					381,
					385,
					386,
					382,
					386,
					383,
					382,
					386,
					387,
					383,
					387,
					384,
					383,
					387,
					388,
					384,
					388,
					367,
					384,
					388,
					368,
					367,
					389,
					390,
					391,
					389,
					391,
					392,
					390,
					393,
					391,
					390,
					394,
					393,
					394,
					395,
					393,
					394,
					396,
					395,
					396,
					397,
					395,
					396,
					398,
					397,
					399,
					390,
					389,
					399,
					400,
					390,
					400,
					394,
					390,
					400,
					401,
					394,
					401,
					396,
					394,
					401,
					402,
					396,
					402,
					398,
					396,
					402,
					403,
					398,
					404,
					400,
					399,
					404,
					405,
					400,
					405,
					401,
					400,
					405,
					406,
					401,
					406,
					402,
					401,
					406,
					407,
					402,
					407,
					403,
					402,
					407,
					408,
					403,
					409,
					405,
					404,
					409,
					410,
					405,
					410,
					406,
					405,
					410,
					411,
					406,
					411,
					407,
					406,
					411,
					412,
					407,
					412,
					408,
					407,
					412,
					413,
					408,
					414,
					398,
					403,
					415,
					398,
					414,
					416,
					415,
					414,
					416,
					414,
					417,
					418,
					416,
					417,
					418,
					417,
					419,
					420,
					418,
					419,
					420,
					419,
					421,
					421,
					419,
					422,
					421,
					422,
					423,
					423,
					422,
					424,
					423,
					424,
					425,
					425,
					424,
					426,
					425,
					426,
					427,
					419,
					417,
					428,
					419,
					428,
					422,
					422,
					428,
					429,
					422,
					429,
					424,
					424,
					429,
					430,
					424,
					430,
					426,
					417,
					431,
					428,
					417,
					414,
					431,
					428,
					431,
					432,
					428,
					432,
					429,
					429,
					432,
					433,
					429,
					433,
					430,
					414,
					403,
					431,
					431,
					403,
					408,
					431,
					408,
					432,
					432,
					408,
					413,
					432,
					413,
					433,
					415,
					397,
					398,
					434,
					435,
					436,
					434,
					436,
					437,
					437,
					436,
					438,
					437,
					438,
					439,
					439,
					438,
					440,
					439,
					440,
					441,
					441,
					440,
					442,
					441,
					442,
					443,
					435,
					444,
					436,
					435,
					445,
					444,
					436,
					444,
					446,
					436,
					446,
					438,
					438,
					446,
					447,
					438,
					447,
					440,
					440,
					447,
					448,
					440,
					448,
					442,
					445,
					449,
					444,
					445,
					450,
					449,
					444,
					449,
					451,
					444,
					451,
					446,
					446,
					451,
					452,
					446,
					452,
					447,
					447,
					452,
					453,
					447,
					453,
					448,
					450,
					454,
					449,
					450,
					455,
					454,
					449,
					454,
					456,
					449,
					456,
					451,
					451,
					456,
					457,
					451,
					457,
					452,
					452,
					457,
					458,
					452,
					458,
					453,
					448,
					453,
					459,
					448,
					459,
					460,
					460,
					459,
					461,
					460,
					461,
					462,
					462,
					461,
					463,
					462,
					463,
					464,
					464,
					463,
					465,
					464,
					465,
					466,
					467,
					464,
					466,
					467,
					466,
					468,
					469,
					467,
					468,
					469,
					468,
					470,
					463,
					471,
					465,
					463,
					472,
					471,
					461,
					472,
					463,
					473,
					467,
					469,
					473,
					474,
					467,
					474,
					462,
					464,
					474,
					464,
					467,
					461,
					475,
					472,
					476,
					474,
					473,
					476,
					477,
					474,
					477,
					462,
					474,
					477,
					460,
					462,
					443,
					477,
					476,
					443,
					442,
					477,
					442,
					460,
					477,
					442,
					448,
					460,
					478,
					471,
					472,
					478,
					472,
					479,
					479,
					472,
					475,
					480,
					478,
					479,
					480,
					479,
					481,
					482,
					480,
					481,
					482,
					481,
					483,
					484,
					482,
					483,
					484,
					483,
					485,
					485,
					483,
					486,
					485,
					486,
					487,
					487,
					486,
					488,
					487,
					488,
					489,
					489,
					488,
					490,
					489,
					490,
					491,
					483,
					481,
					492,
					483,
					492,
					486,
					486,
					492,
					493,
					486,
					493,
					488,
					488,
					493,
					494,
					488,
					494,
					490,
					481,
					479,
					495,
					481,
					495,
					492,
					492,
					495,
					496,
					492,
					496,
					493,
					493,
					496,
					497,
					493,
					497,
					494,
					495,
					498,
					496,
					495,
					475,
					498,
					459,
					498,
					475,
					459,
					475,
					461,
					453,
					498,
					459,
					453,
					458,
					498,
					496,
					498,
					458,
					496,
					458,
					497,
					479,
					475,
					495,
					491,
					490,
					499,
					491,
					499,
					500,
					500,
					499,
					501,
					500,
					501,
					502,
					502,
					501,
					503,
					502,
					503,
					504,
					504,
					503,
					505,
					504,
					505,
					506,
					503,
					507,
					505,
					503,
					508,
					507,
					501,
					508,
					503,
					508,
					509,
					507,
					508,
					510,
					509,
					510,
					455,
					509,
					510,
					454,
					455,
					501,
					511,
					508,
					511,
					510,
					508,
					499,
					511,
					501,
					511,
					512,
					510,
					512,
					454,
					510,
					512,
					456,
					454,
					513,
					512,
					511,
					499,
					513,
					511,
					513,
					514,
					512,
					514,
					456,
					512,
					514,
					457,
					456,
					490,
					513,
					499,
					490,
					494,
					513,
					494,
					514,
					513,
					494,
					497,
					514,
					497,
					457,
					514,
					497,
					458,
					457
				],
				"vertices": [
					0.2878271,
					-0.2878271,
					-0.2878271,
					0.3089014,
					-0.3089014,
					-0.2401929,
					0.2485034,
					-0.3535864,
					-0.2485034,
					0.2401929,
					-0.3089014,
					-0.3089014,
					0.1748779,
					-0.3852368,
					-0.2637085,
					0.1701416,
					-0.3313476,
					-0.3313476,
					0.0902124,
					-0.4055811,
					-0.2754956,
					0.0880603,
					-0.3469702,
					-0.3469702,
					-1.811975e-8,
					-0.4123633,
					-0.2801587,
					-5.340553e-8,
					-0.3525147,
					-0.3525147,
					0.2637085,
					-0.3852368,
					-0.1748779,
					0.3313476,
					-0.3313476,
					-0.1701416,
					0.1839429,
					-0.4252783,
					-0.1839429,
					0.09450744,
					-0.4502636,
					-0.1919995,
					-3.91007e-8,
					-0.4585547,
					-0.1956055,
					0.2754956,
					-0.4055811,
					-0.0902124,
					0.3469702,
					-0.3469702,
					-0.0880603,
					0.1919995,
					-0.4502636,
					-0.09450744,
					0.09875244,
					-0.4785693,
					-0.09875244,
					-1.182554e-8,
					-0.4882324,
					-0.1007947,
					0.2801587,
					-0.4123633,
					3.814697e-8,
					0.3525147,
					-0.3525147,
					3.814697e-8,
					0.1956055,
					-0.4585547,
					1.945489e-8,
					0.1007947,
					-0.4882324,
					-9.536743e-9,
					0.1007947,
					-0.4882324,
					-9.536743e-9,
					0,
					-0.5,
					0,
					0,
					-0.5,
					0,
					-0.09875244,
					-0.4785693,
					-0.09875244,
					-0.09450744,
					-0.4502636,
					-0.1919995,
					-0.1919995,
					-0.4502636,
					-0.09450744,
					-0.1839429,
					-0.4252783,
					-0.1839429,
					-0.2754956,
					-0.4055811,
					-0.0902124,
					-0.2637085,
					-0.3852368,
					-0.1748779,
					-0.3469702,
					-0.3469702,
					-0.0880603,
					-0.3313476,
					-0.3313476,
					-0.1701416,
					-0.2485034,
					-0.3535864,
					-0.2485034,
					-0.3089014,
					-0.3089014,
					-0.2401929,
					-0.2401929,
					-0.3089014,
					-0.3089014,
					-0.2878271,
					-0.2878271,
					-0.2878271,
					-0.3525147,
					-0.3525147,
					0,
					-0.2801587,
					-0.4123633,
					1.907349e-8,
					-0.1701416,
					-0.3313476,
					-0.3313476,
					-0.1748779,
					-0.3852368,
					-0.2637085,
					-0.1956055,
					-0.4585547,
					-3.814694e-10,
					-0.0880603,
					-0.3469702,
					-0.3469702,
					-0.0902124,
					-0.4055811,
					-0.2754956,
					-0.1007953,
					-0.4882324,
					0,
					0,
					-0.5,
					0,
					-0.2878271,
					-0.2878271,
					0.2878271,
					-0.3089014,
					-0.3089014,
					0.2401929,
					-0.2485034,
					-0.3535864,
					0.2485034,
					-0.2401929,
					-0.3089014,
					0.3089014,
					-0.1748779,
					-0.3852368,
					0.2637085,
					-0.1701416,
					-0.3313476,
					0.3313476,
					-0.0902124,
					-0.4055811,
					0.2754956,
					-0.0880603,
					-0.3469702,
					0.3469702,
					4.768371e-8,
					-0.4123633,
					0.2801587,
					5.722046e-8,
					-0.3525147,
					0.3525147,
					-0.2637085,
					-0.3852368,
					0.1748779,
					-0.3313476,
					-0.3313476,
					0.1701416,
					-0.1839429,
					-0.4252783,
					0.1839429,
					-0.09450744,
					-0.4502636,
					0.1919995,
					-2.002722e-8,
					-0.4585547,
					0.1956055,
					-0.2754956,
					-0.4055811,
					0.0902124,
					-0.3469702,
					-0.3469702,
					0.0880603,
					-0.1919995,
					-0.4502636,
					0.09450744,
					-0.09875244,
					-0.4785693,
					0.09875244,
					-2.136236e-8,
					-0.4882324,
					0.1007947,
					-0.2801587,
					-0.4123633,
					1.907349e-8,
					-0.3525147,
					-0.3525147,
					0,
					-0.1956055,
					-0.4585547,
					-3.814694e-10,
					-0.1007953,
					-0.4882324,
					0,
					0,
					-0.5,
					0,
					0,
					-0.5,
					0,
					0.09875244,
					-0.4785693,
					0.09875244,
					0.09450744,
					-0.4502636,
					0.1919995,
					0.1919995,
					-0.4502636,
					0.09450744,
					0.1839429,
					-0.4252783,
					0.1839429,
					0.2754956,
					-0.4055811,
					0.0902124,
					0.2637085,
					-0.3852368,
					0.1748779,
					0.3469702,
					-0.3469702,
					0.0880603,
					0.3313476,
					-0.3313476,
					0.1701416,
					0.2485034,
					-0.3535864,
					0.2485034,
					0.3089014,
					-0.3089014,
					0.2401929,
					0.2401929,
					-0.3089014,
					0.3089014,
					0.2878271,
					-0.2878271,
					0.2878271,
					0.1701416,
					-0.3313476,
					0.3313476,
					0.1748779,
					-0.3852368,
					0.2637085,
					0.0880603,
					-0.3469702,
					0.3469702,
					0.0902124,
					-0.4055811,
					0.2754956,
					0,
					-0.5,
					0,
					0.1007947,
					-0.4882324,
					-9.536743e-9,
					0.2888354,
					0.2879004,
					-0.2888354,
					0.2409058,
					0.3090894,
					-0.3099512,
					0.2492358,
					0.3538598,
					-0.2492358,
					0.3099512,
					0.3090894,
					-0.2409058,
					0.2646435,
					0.3856372,
					-0.1754565,
					0.3324731,
					0.3315698,
					-0.1707129,
					0.2764746,
					0.4060791,
					-0.09051941,
					0.3481274,
					0.3472266,
					-0.08835449,
					0.2811499,
					0.4128613,
					-9.059906e-8,
					0.3536914,
					0.3527881,
					-1.144409e-7,
					0.1754565,
					0.3856372,
					-0.2646435,
					0.1707129,
					0.3315698,
					-0.3324731,
					0.1845666,
					0.4257813,
					-0.1845666,
					0.1926355,
					0.4508106,
					-0.09482116,
					0.1962756,
					0.4591016,
					-6.198883e-8,
					0.09051941,
					0.4060791,
					-0.2764746,
					0.08835449,
					0.3472266,
					-0.3481274,
					0.09482116,
					0.4508106,
					-0.1926355,
					0.09908752,
					0.4791992,
					-0.09908752,
					0.1011365,
					0.4888574,
					-3.218651e-8,
					-1.239777e-7,
					0.4128613,
					-0.2811499,
					-1.573563e-7,
					0.3527881,
					-0.3536914,
					-8.583068e-8,
					0.4591016,
					-0.1962756,
					-4.410744e-8,
					0.4888574,
					-0.1011359,
					4.764297e-9,
					0.5,
					-4.768371e-9,
					4.764297e-9,
					0.5,
					-4.768371e-9,
					0.09908752,
					0.4791992,
					0.09908752,
					0.1926355,
					0.4508106,
					0.09482116,
					0.09482116,
					0.4508106,
					0.1926355,
					0.1845666,
					0.4257813,
					0.1845666,
					0.09051941,
					0.4060791,
					0.2764746,
					0.1754565,
					0.3856372,
					0.2646435,
					0.08835449,
					0.3472266,
					0.3481274,
					0.1707129,
					0.3315698,
					0.3324731,
					0.2492358,
					0.3538598,
					0.2492358,
					0.2409058,
					0.3090894,
					0.3099512,
					0.3099512,
					0.3090894,
					0.2409058,
					0.2888354,
					0.2879004,
					0.2888354,
					5.722046e-8,
					0.3527881,
					0.3536914,
					4.768371e-8,
					0.4128613,
					0.2811499,
					0.3324731,
					0.3315698,
					0.1707129,
					0.2646435,
					0.3856372,
					0.1754565,
					3.099441e-8,
					0.4591016,
					0.1962756,
					0.3481274,
					0.3472266,
					0.08835449,
					0.2764746,
					0.4060791,
					0.09051941,
					-0.08835449,
					0.3472266,
					0.3481274,
					-0.09051941,
					0.4060791,
					0.2764746,
					-0.1707129,
					0.3315698,
					0.3324731,
					-0.1754565,
					0.3856372,
					0.2646435,
					-0.2409058,
					0.3090894,
					0.3099512,
					-0.2492358,
					0.3538598,
					0.2492358,
					-0.2888354,
					0.2879004,
					0.2888354,
					-0.3099512,
					0.3090894,
					0.2409058,
					-0.2646435,
					0.3856372,
					0.1754565,
					-0.3324731,
					0.3315698,
					0.1707129,
					-0.2764746,
					0.4060791,
					0.09051941,
					-0.3481274,
					0.3472266,
					0.08835449,
					-0.2811499,
					0.4128613,
					0,
					-0.3536914,
					0.3527881,
					0,
					-0.1845666,
					0.4257813,
					0.1845666,
					-0.1926355,
					0.4508106,
					0.09482116,
					-0.1962756,
					0.4591016,
					0,
					-0.09482116,
					0.4508106,
					0.1926355,
					-0.09908752,
					0.4791992,
					0.09908752,
					-0.1011359,
					0.4888574,
					0,
					1.549721e-8,
					0.4888574,
					0.1011359,
					4.764297e-9,
					0.5,
					-4.768371e-9,
					4.764297e-9,
					0.5,
					-4.768371e-9,
					4.764297e-9,
					0.5,
					-4.768371e-9,
					-0.3099512,
					0.3090894,
					-0.2409058,
					-0.2492358,
					0.3538598,
					-0.2492358,
					-0.2409058,
					0.3090894,
					-0.3099512,
					-0.2888354,
					0.2879004,
					-0.2888354,
					-0.1707129,
					0.3315698,
					-0.3324731,
					-0.1754565,
					0.3856372,
					-0.2646435,
					-0.08835449,
					0.3472266,
					-0.3481274,
					-0.09051879,
					0.4060791,
					-0.2764746,
					-0.3324731,
					0.3315698,
					-0.1707129,
					-0.2646435,
					0.3856372,
					-0.1754565,
					-0.1845666,
					0.4257813,
					-0.1845666,
					-0.09482116,
					0.4508106,
					-0.1926355,
					-0.3481274,
					0.3472266,
					-0.08835449,
					-0.2764746,
					0.4060791,
					-0.09051941,
					-0.1926355,
					0.4508106,
					-0.09482116,
					-0.09908752,
					0.4791992,
					-0.09908752,
					-0.3536914,
					0.3527881,
					0,
					-0.2811499,
					0.4128613,
					0,
					-0.1962756,
					0.4591016,
					0,
					-0.1011359,
					0.4888574,
					0,
					4.764297e-9,
					0.5,
					-4.768371e-9,
					0.2878271,
					-0.2878271,
					-0.2878271,
					0.3089014,
					-0.2401929,
					-0.3089014,
					0.3535864,
					-0.2485034,
					-0.2485034,
					0.3089014,
					-0.3089014,
					-0.2401929,
					0.3852368,
					-0.2637085,
					-0.1748779,
					0.3313476,
					-0.3313476,
					-0.1701416,
					0.4055811,
					-0.2754956,
					-0.0902124,
					0.3469702,
					-0.3469702,
					-0.0880603,
					0.4123633,
					-0.2801587,
					-3.814697e-8,
					0.3525147,
					-0.3525147,
					3.814697e-8,
					0.3852368,
					-0.1748791,
					-0.2637085,
					0.3313476,
					-0.1701416,
					-0.3313476,
					0.4252783,
					-0.1839429,
					-0.1839429,
					0.4502636,
					-0.1919995,
					-0.09450744,
					0.4585547,
					-0.1956055,
					-7.667521e-8,
					0.4055811,
					-0.0902124,
					-0.2754956,
					0.3469702,
					-0.0880603,
					-0.3469702,
					0.4502636,
					-0.09450744,
					-0.1919995,
					0.4785693,
					-0.09875244,
					-0.09875244,
					0.4882324,
					-0.1007953,
					-3.814697e-8,
					0.4137475,
					-0.0008836472,
					-0.2811499,
					0.3536914,
					-0.0008836466,
					-0.3536914,
					0.4598437,
					-0.0008836464,
					-0.1962756,
					0.4896582,
					-0.0008836508,
					-0.1011359,
					0.5,
					-4.764297e-9,
					-1.639128e-7,
					0.4785693,
					-0.09875244,
					0.09875244,
					0.4502636,
					-0.1919995,
					0.09450744,
					0.4502636,
					-0.09450744,
					0.1919995,
					0.4252783,
					-0.1839429,
					0.1839429,
					0.4055811,
					-0.0902124,
					0.2754956,
					0.3852368,
					-0.1748791,
					0.2637085,
					0.3469702,
					-0.0880603,
					0.3469702,
					0.3313476,
					-0.1701416,
					0.3313476,
					0.3535864,
					-0.2485034,
					0.2485034,
					0.3089014,
					-0.2401929,
					0.3089014,
					0.3089014,
					-0.3089014,
					0.2401929,
					0.2878271,
					-0.2878271,
					0.2878271,
					0.3535523,
					-3.128662e-11,
					0.3535523,
					0.4157349,
					2.270099e-11,
					0.2777856,
					0.3313476,
					-0.3313476,
					0.1701416,
					0.3852368,
					-0.2637085,
					0.1748779,
					0.4619385,
					3.492459e-11,
					0.1913415,
					0.3469702,
					-0.3469702,
					0.0880603,
					0.4055811,
					-0.2754956,
					0.0902124,
					0.3481274,
					0.08750671,
					0.3481274,
					0.4069678,
					0.08967713,
					0.2764746,
					0.3324731,
					0.1698926,
					0.3324731,
					0.3865088,
					0.1746521,
					0.2646435,
					0.3099512,
					0.2401733,
					0.3099512,
					0.354751,
					0.2485034,
					0.2492358,
					0.2888354,
					0.2879004,
					0.2888354,
					0.3099512,
					0.3090894,
					0.2409058,
					0.3865088,
					0.2637475,
					0.1754565,
					0.3324731,
					0.3315698,
					0.1707129,
					0.4069678,
					0.2755518,
					0.09051941,
					0.3481274,
					0.3472266,
					0.08835449,
					0.4137475,
					0.2802221,
					-1.335144e-7,
					0.3536914,
					0.3527881,
					-1.144409e-7,
					0.4265039,
					0.1837427,
					0.1845666,
					0.4515527,
					0.191842,
					0.09482116,
					0.4598437,
					0.195459,
					-1.525879e-7,
					0.4515527,
					0.09398254,
					0.1926355,
					0.479956,
					0.09823791,
					0.09908752,
					0.4896582,
					0.1002966,
					-1.621246e-7,
					0.4903906,
					7.275958e-12,
					0.09754516,
					0.4069678,
					0.2755518,
					-0.09051879,
					0.3481274,
					0.3472266,
					-0.08835449,
					0.3865088,
					0.2637475,
					-0.1754565,
					0.3324731,
					0.3315698,
					-0.1707129,
					0.354751,
					0.2485034,
					-0.2492358,
					0.3099512,
					0.3090894,
					-0.2409058,
					0.3099512,
					0.2401733,
					-0.3099512,
					0.2888354,
					0.2879004,
					-0.2888354,
					0.3324731,
					0.1698926,
					-0.3324731,
					0.3865088,
					0.1746521,
					-0.2646435,
					0.3481274,
					0.08750671,
					-0.3481274,
					0.4069678,
					0.08967713,
					-0.2764746,
					0.4265039,
					0.1837427,
					-0.1845666,
					0.4515527,
					0.09398254,
					-0.1926355,
					0.4515527,
					0.191842,
					-0.09482116,
					0.479956,
					0.09823791,
					-0.09908752,
					0.2878271,
					-0.2878271,
					0.2878271,
					0.3089014,
					-0.2401929,
					0.3089014,
					0.2485034,
					-0.2485034,
					0.3535864,
					0.2401929,
					-0.3089014,
					0.3089014,
					0.1748791,
					-0.2637085,
					0.3852368,
					0.1701416,
					-0.3313476,
					0.3313476,
					0.09021179,
					-0.2754956,
					0.4055811,
					0.0880603,
					-0.3469702,
					0.3469702,
					6.67572e-8,
					-0.2801587,
					0.4123633,
					5.722046e-8,
					-0.3525147,
					0.3525147,
					0.2637085,
					-0.1748791,
					0.3852368,
					0.3313476,
					-0.1701416,
					0.3313476,
					0.1839429,
					-0.1839429,
					0.4252783,
					0.09450744,
					-0.1919995,
					0.4502636,
					7.571769e-8,
					-0.1956055,
					0.4585547,
					0.2754956,
					-0.0902124,
					0.4055811,
					0.3469702,
					-0.0880603,
					0.3469702,
					0.1919995,
					-0.09450744,
					0.4502636,
					0.09875244,
					-0.09875244,
					0.4785693,
					8.038161e-8,
					-0.1007953,
					0.4882324,
					0.2777856,
					-3.143213e-11,
					0.4157349,
					0.3535523,
					-3.128662e-11,
					0.3535523,
					0.1913415,
					8.076313e-12,
					0.4619385,
					0.09754516,
					-3.605237e-11,
					0.4903906,
					8.19558e-8,
					-9.537071e-9,
					0.5,
					-0.09875244,
					-0.09875244,
					0.4785693,
					-0.09450744,
					-0.1919995,
					0.4502636,
					-0.1919995,
					-0.09450744,
					0.4502636,
					-0.1839429,
					-0.1839429,
					0.4252783,
					-0.2754956,
					-0.0902124,
					0.4055811,
					-0.2637085,
					-0.1748779,
					0.3852368,
					-0.3469702,
					-0.0880603,
					0.3469702,
					-0.3313476,
					-0.1701416,
					0.3313476,
					-0.2485034,
					-0.2485034,
					0.3535864,
					-0.3089014,
					-0.2401929,
					0.3089014,
					-0.2401929,
					-0.3089014,
					0.3089014,
					-0.2878271,
					-0.2878271,
					0.2878271,
					-0.3535523,
					3.128662e-11,
					0.3535523,
					-0.2777856,
					3.143213e-11,
					0.4157349,
					-0.1701416,
					-0.3313476,
					0.3313476,
					-0.1748779,
					-0.2637085,
					0.3852368,
					-0.1913415,
					-8.076313e-12,
					0.4619385,
					-0.0880603,
					-0.3469702,
					0.3469702,
					-0.09021179,
					-0.2754956,
					0.4055811,
					-0.3481274,
					0.08750671,
					0.3481274,
					-0.2764746,
					0.08967713,
					0.4069678,
					-0.3324731,
					0.1698926,
					0.3324731,
					-0.2646435,
					0.1746533,
					0.3865088,
					-0.3099512,
					0.2401733,
					0.3099512,
					-0.2492358,
					0.2485034,
					0.354751,
					-0.2888354,
					0.2879004,
					0.2888354,
					-0.2409058,
					0.3090894,
					0.3099512,
					-0.1754565,
					0.2637475,
					0.3865088,
					-0.1707129,
					0.3315698,
					0.3324731,
					-0.09051941,
					0.2755518,
					0.4069678,
					-0.08835449,
					0.3472266,
					0.3481274,
					6.67572e-8,
					0.2802221,
					0.4137475,
					5.722046e-8,
					0.3527881,
					0.3536914,
					-0.1845666,
					0.1837427,
					0.4265039,
					-0.09482116,
					0.191842,
					0.4515527,
					7.629394e-8,
					0.195459,
					0.4598437,
					-0.1926355,
					0.09398254,
					0.4515527,
					-0.09908752,
					0.09823791,
					0.479956,
					7.629394e-8,
					0.1002972,
					0.4896582,
					-0.09754516,
					3.588866e-11,
					0.4903906,
					0.09051941,
					0.2755518,
					0.4069678,
					0.08835449,
					0.3472266,
					0.3481274,
					0.1754565,
					0.2637475,
					0.3865088,
					0.1707129,
					0.3315698,
					0.3324731,
					0.2492358,
					0.2485034,
					0.354751,
					0.2409058,
					0.3090894,
					0.3099512,
					0.3099512,
					0.2401733,
					0.3099512,
					0.2888354,
					0.2879004,
					0.2888354,
					0.3324731,
					0.1698926,
					0.3324731,
					0.2646435,
					0.1746533,
					0.3865088,
					0.3481274,
					0.08750671,
					0.3481274,
					0.2764746,
					0.08967713,
					0.4069678,
					0.1845666,
					0.1837427,
					0.4265039,
					0.1926355,
					0.09398254,
					0.4515527,
					0.09482116,
					0.191842,
					0.4515527,
					0.09908752,
					0.09823791,
					0.479956,
					-0.2878271,
					-0.2878271,
					0.2878271,
					-0.3089014,
					-0.2401929,
					0.3089014,
					-0.3535864,
					-0.2485034,
					0.2485034,
					-0.3089014,
					-0.3089014,
					0.2401929,
					-0.3852368,
					-0.2637085,
					0.1748791,
					-0.3313476,
					-0.3313476,
					0.1701416,
					-0.4055811,
					-0.2754956,
					0.0902124,
					-0.3469702,
					-0.3469702,
					0.0880603,
					-0.4123633,
					-0.2801587,
					3.814697e-8,
					-0.3525147,
					-0.3525147,
					0,
					-0.3852368,
					-0.1748779,
					0.2637085,
					-0.3313476,
					-0.1701416,
					0.3313476,
					-0.4252783,
					-0.1839429,
					0.1839429,
					-0.4502636,
					-0.1919995,
					0.09450744,
					-0.4585547,
					-0.1956055,
					3.852852e-8,
					-0.4055811,
					-0.0902124,
					0.2754956,
					-0.3469702,
					-0.0880603,
					0.3469702,
					-0.4502636,
					-0.09450744,
					0.1919995,
					-0.4785693,
					-0.09875244,
					0.09875244,
					-0.4882324,
					-0.1007947,
					3.814697e-8,
					-0.4157349,
					-2.313754e-11,
					0.2777856,
					-0.3535523,
					3.128662e-11,
					0.3535523,
					-0.4619385,
					-3.492459e-11,
					0.1913415,
					-0.4903906,
					-7.275958e-12,
					0.09754516,
					-0.5,
					4.764297e-9,
					0,
					-0.4069678,
					0.08967713,
					0.2764746,
					-0.3481274,
					0.08750671,
					0.3481274,
					-0.3865088,
					0.1746533,
					0.2646435,
					-0.3324731,
					0.1698926,
					0.3324731,
					-0.354751,
					0.2485034,
					0.2492358,
					-0.3099512,
					0.2401733,
					0.3099512,
					-0.3099512,
					0.3090894,
					0.2409058,
					-0.2888354,
					0.2879004,
					0.2888354,
					-0.3324731,
					0.3315698,
					0.1707129,
					-0.3865088,
					0.2637475,
					0.1754565,
					-0.4265039,
					0.1837427,
					0.1845666,
					-0.4515527,
					0.09398254,
					0.1926355,
					-0.3481274,
					0.3472266,
					0.08835449,
					-0.4069678,
					0.2755518,
					0.09051941,
					-0.4515527,
					0.191842,
					0.09482116,
					-0.479956,
					0.09823791,
					0.09908752,
					-0.3536914,
					0.3527881,
					0,
					-0.4137475,
					0.2802221,
					0,
					-0.4598437,
					0.195459,
					0,
					-0.4896582,
					0.1002972,
					0,
					-0.3089014,
					-0.3089014,
					-0.2401929,
					-0.3535864,
					-0.2485034,
					-0.2485034,
					-0.3089014,
					-0.2401929,
					-0.3089014,
					-0.2878271,
					-0.2878271,
					-0.2878271,
					-0.3313476,
					-0.1701416,
					-0.3313476,
					-0.3852368,
					-0.1748779,
					-0.2637085,
					-0.3469702,
					-0.0880603,
					-0.3469702,
					-0.4055811,
					-0.0902124,
					-0.2754956,
					-0.3536914,
					-0.0008836116,
					-0.3536914,
					-0.4137475,
					-0.0008836098,
					-0.2811499,
					-0.3313476,
					-0.3313476,
					-0.1701416,
					-0.3852368,
					-0.2637085,
					-0.1748779,
					-0.4252783,
					-0.1839429,
					-0.1839429,
					-0.4502636,
					-0.09450744,
					-0.1919995,
					-0.4598437,
					-0.0008836057,
					-0.1962756,
					-0.3469702,
					-0.3469702,
					-0.0880603,
					-0.4055811,
					-0.2754956,
					-0.0902124,
					-0.4502636,
					-0.1919995,
					-0.09450744,
					-0.4785693,
					-0.09875244,
					-0.09875244,
					-0.4896582,
					-0.000883606,
					-0.1011359,
					-0.3525147,
					-0.3525147,
					0,
					-0.4123633,
					-0.2801587,
					3.814697e-8,
					-0.4585547,
					-0.1956055,
					3.852852e-8,
					-0.4882324,
					-0.1007947,
					3.814697e-8,
					-0.5,
					4.764297e-9,
					0,
					-0.4069678,
					0.08967713,
					-0.2764746,
					-0.3481274,
					0.08750671,
					-0.3481274,
					-0.3324731,
					0.1698926,
					-0.3324731,
					-0.3865088,
					0.1746533,
					-0.2646435,
					-0.3099512,
					0.2401733,
					-0.3099512,
					-0.354751,
					0.2485034,
					-0.2492358,
					-0.2888354,
					0.2879004,
					-0.2888354,
					-0.3099512,
					0.3090894,
					-0.2409058,
					-0.3865088,
					0.2637475,
					-0.1754565,
					-0.3324731,
					0.3315698,
					-0.1707129,
					-0.4069678,
					0.2755518,
					-0.09051941,
					-0.3481274,
					0.3472266,
					-0.08835449,
					-0.4137475,
					0.2802221,
					0,
					-0.3536914,
					0.3527881,
					0,
					-0.4265039,
					0.1837427,
					-0.1845666,
					-0.4515527,
					0.191842,
					-0.09482116,
					-0.4598437,
					0.195459,
					0,
					-0.4515527,
					0.09398254,
					-0.1926355,
					-0.479956,
					0.09823791,
					-0.09908752,
					-0.4896582,
					0.1002972,
					0,
					-0.2878271,
					-0.2878271,
					-0.2878271,
					-0.3089014,
					-0.2401929,
					-0.3089014,
					-0.2485034,
					-0.2485034,
					-0.3535864,
					-0.2401929,
					-0.3089014,
					-0.3089014,
					-0.1748791,
					-0.2637085,
					-0.3852368,
					-0.1701416,
					-0.3313476,
					-0.3313476,
					-0.0902124,
					-0.2754956,
					-0.4055811,
					-0.0880603,
					-0.3469702,
					-0.3469702,
					2.593995e-8,
					-0.2801587,
					-0.4123633,
					-5.340553e-8,
					-0.3525147,
					-0.3525147,
					-0.2637085,
					-0.1748779,
					-0.3852368,
					-0.3313476,
					-0.1701416,
					-0.3313476,
					-0.1839429,
					-0.1839429,
					-0.4252783,
					-0.09450744,
					-0.1919995,
					-0.4502636,
					-8.392307e-9,
					-0.1956055,
					-0.4585547,
					-0.2754956,
					-0.0902124,
					-0.4055811,
					-0.3469702,
					-0.0880603,
					-0.3469702,
					-0.1919995,
					-0.09450744,
					-0.4502636,
					-0.09875244,
					-0.09875244,
					-0.4785693,
					3.356923e-8,
					-0.1007953,
					-0.4882324,
					-0.2811499,
					-0.0008836147,
					-0.4137475,
					-0.3536914,
					-0.0008836116,
					-0.3536914,
					-0.1962756,
					-0.0008836184,
					-0.4598437,
					-0.1011359,
					-0.0008836251,
					-0.4896582,
					-2.235174e-7,
					3.274181e-13,
					-0.5,
					0.09875244,
					-0.09875244,
					-0.4785693,
					0.09450744,
					-0.1919995,
					-0.4502636,
					0.1919995,
					-0.09450744,
					-0.4502636,
					0.1839429,
					-0.1839429,
					-0.4252783,
					0.2754956,
					-0.0902124,
					-0.4055811,
					0.2637085,
					-0.1748791,
					-0.3852368,
					0.3469702,
					-0.0880603,
					-0.3469702,
					0.3313476,
					-0.1701416,
					-0.3313476,
					0.2485034,
					-0.2485034,
					-0.3535864,
					0.3089014,
					-0.2401929,
					-0.3089014,
					0.2401929,
					-0.3089014,
					-0.3089014,
					0.2878271,
					-0.2878271,
					-0.2878271,
					0.3536914,
					-0.0008836466,
					-0.3536914,
					0.2811499,
					-0.0008836342,
					-0.4137475,
					0.1701416,
					-0.3313476,
					-0.3313476,
					0.1748779,
					-0.2637085,
					-0.3852368,
					0.1962756,
					-0.0008836379,
					-0.4598437,
					0.0880603,
					-0.3469702,
					-0.3469702,
					0.0902124,
					-0.2754956,
					-0.4055811,
					0.3481274,
					0.08750671,
					-0.3481274,
					0.2764746,
					0.08967713,
					-0.4069678,
					0.3324731,
					0.1698926,
					-0.3324731,
					0.2646435,
					0.1746533,
					-0.3865088,
					0.3099512,
					0.2401733,
					-0.3099512,
					0.2492358,
					0.2485034,
					-0.354751,
					0.2888354,
					0.2879004,
					-0.2888354,
					0.2409058,
					0.3090894,
					-0.3099512,
					0.1754565,
					0.2637475,
					-0.3865088,
					0.1707129,
					0.3315698,
					-0.3324731,
					0.09051879,
					0.2755518,
					-0.4069678,
					0.08835449,
					0.3472266,
					-0.3481274,
					-1.811981e-7,
					0.2802221,
					-0.4137475,
					-1.573563e-7,
					0.3527881,
					-0.3536914,
					0.1845666,
					0.1837427,
					-0.4265039,
					0.09482116,
					0.191842,
					-0.4515527,
					-2.098083e-7,
					0.195459,
					-0.4598437,
					0.1926355,
					0.09398254,
					-0.4515527,
					0.09908752,
					0.09823791,
					-0.479956,
					-2.193451e-7,
					0.1002972,
					-0.4896582,
					0.1011359,
					-0.0008836288,
					-0.4896582,
					-0.09051879,
					0.2755518,
					-0.4069678,
					-0.08835449,
					0.3472266,
					-0.3481274,
					-0.1754565,
					0.2637475,
					-0.3865088,
					-0.1707129,
					0.3315698,
					-0.3324731,
					-0.2492358,
					0.2485034,
					-0.354751,
					-0.2409058,
					0.3090894,
					-0.3099512,
					-0.3099512,
					0.2401733,
					-0.3099512,
					-0.2888354,
					0.2879004,
					-0.2888354,
					-0.3324731,
					0.1698926,
					-0.3324731,
					-0.2646435,
					0.1746533,
					-0.3865088,
					-0.3481274,
					0.08750671,
					-0.3481274,
					-0.2764746,
					0.08967713,
					-0.4069678,
					-0.1845666,
					0.1837427,
					-0.4265039,
					-0.1926355,
					0.09398254,
					-0.4515527,
					-0.09482116,
					0.191842,
					-0.4515527,
					-0.09908752,
					0.09823791,
					-0.479956
				],
				"uvs": [
					0.3737993,
					0.3181914,
					0.3935962,
					0.3048138,
					0.3737993,
					0.2834,
					0.3540024,
					0.3048138,
					0.3420187,
					0.2507943,
					0.3243351,
					0.2905639,
					0.2992194,
					0.2378804,
					0.2884209,
					0.2806473,
					0.2488924,
					0.233575,
					0.2488924,
					0.2771286,
					0.4055798,
					0.2507943,
					0.4232635,
					0.2905639,
					0.3737993,
					0.2142188,
					0.3216372,
					0.1856271,
					0.2488924,
					0.1743396,
					0.4483792,
					0.2378804,
					0.4591776,
					0.2806473,
					0.4259613,
					0.1752676,
					0.3725803,
					0.1336257,
					0.2488924,
					0.1020471,
					0.4987062,
					0.233575,
					0.4987062,
					0.2771286,
					0.4987062,
					0.1695687,
					0.4987062,
					0.09756867,
					0.4987062,
					0.09756867,
					0.3734581,
					0.02175571,
					0.3734581,
					0.02175571,
					0.1252045,
					0.1421715,
					0.1761476,
					0.1848103,
					0.07182345,
					0.1859203,
					0.1239855,
					0.2096534,
					0.04940557,
					0.2378804,
					0.09220496,
					0.2507943,
					0.03860712,
					0.2806473,
					0.07452133,
					0.2905639,
					0.1239855,
					0.2834,
					0.1041886,
					0.3048139,
					0.1437824,
					0.3048138,
					0.1239855,
					0.3181914,
					-0.0009213686,
					0.2771286,
					-0.0009213686,
					0.233575,
					0.1734497,
					0.2905639,
					0.155766,
					0.2507943,
					-0.0009213686,
					0.1733436,
					0.2093638,
					0.2806473,
					0.1985654,
					0.2378804,
					-0.0009213686,
					0.1111187,
					0.119418,
					0.02175571,
					0.8734268,
					0.3181914,
					0.8932236,
					0.3048139,
					0.8734268,
					0.2834,
					0.8536299,
					0.3048138,
					0.8416463,
					0.2507943,
					0.8239627,
					0.2905639,
					0.798847,
					0.2378804,
					0.7880484,
					0.2806473,
					0.74852,
					0.233575,
					0.74852,
					0.2771286,
					0.9052075,
					0.2507943,
					0.922891,
					0.2905639,
					0.8734268,
					0.2096534,
					0.8212647,
					0.1818529,
					0.74852,
					0.1743396,
					0.9480067,
					0.2378804,
					0.9588053,
					0.2806473,
					0.925589,
					0.1859203,
					0.8819596,
					0.1395283,
					0.74852,
					0.1046903,
					0.9983337,
					0.233575,
					0.9983337,
					0.2771286,
					0.9983337,
					0.1733436,
					0.9983337,
					0.1035097,
					0.8739171,
					0.02038012,
					0.8739171,
					0.02038012,
					0.6150803,
					0.1321084,
					0.6757752,
					0.1830822,
					0.571451,
					0.1807698,
					0.6236131,
					0.2142188,
					0.5490332,
					0.2378804,
					0.5918325,
					0.2507943,
					0.5382347,
					0.2806473,
					0.5741488,
					0.2905639,
					0.6236131,
					0.2834,
					0.6038162,
					0.3048138,
					0.6434099,
					0.3048138,
					0.6236131,
					0.3181914,
					0.6730773,
					0.2905639,
					0.6553935,
					0.2507943,
					0.7089914,
					0.2806473,
					0.698193,
					0.2378804,
					0.6224174,
					0.01762898,
					0.4987062,
					0.09756867,
					0.3737993,
					0.683609,
					0.3540024,
					0.6969866,
					0.3737993,
					0.7253528,
					0.3935962,
					0.6969866,
					0.4055798,
					0.7454442,
					0.4232635,
					0.7112365,
					0.4483792,
					0.7583581,
					0.4591776,
					0.7211531,
					0.4987062,
					0.7626636,
					0.4987062,
					0.7246718,
					0.3420188,
					0.7454442,
					0.3243351,
					0.7112365,
					0.3737993,
					0.7708623,
					0.4259613,
					0.8105438,
					0.4987062,
					0.8162426,
					0.2992194,
					0.7583581,
					0.2884209,
					0.7211531,
					0.3216372,
					0.8105438,
					0.3737993,
					0.8706206,
					0.4987062,
					0.9020402,
					0.2488924,
					0.7626636,
					0.2488924,
					0.7246718,
					0.2488924,
					0.8162426,
					0.2488924,
					0.9020402,
					0.3847829,
					0.9717647,
					0.3847829,
					0.9717647,
					0.6236131,
					0.8706206,
					0.5714509,
					0.8105438,
					0.6757752,
					0.8105438,
					0.6236131,
					0.7708623,
					0.698193,
					0.7583581,
					0.6553935,
					0.7454442,
					0.7089914,
					0.7211531,
					0.6730773,
					0.7112365,
					0.6236131,
					0.7253528,
					0.6434099,
					0.6969866,
					0.6038162,
					0.6969866,
					0.6236131,
					0.683609,
					0.74852,
					0.7246718,
					0.74852,
					0.7626636,
					0.5741488,
					0.7112365,
					0.5918325,
					0.7454442,
					0.74852,
					0.8162426,
					0.5382347,
					0.7211531,
					0.5490332,
					0.7583581,
					0.7880484,
					0.7211531,
					0.798847,
					0.7583581,
					0.8239627,
					0.7112365,
					0.8416463,
					0.7454442,
					0.8536299,
					0.6969866,
					0.8734268,
					0.7253528,
					0.8734268,
					0.683609,
					0.8932238,
					0.6969866,
					0.9052075,
					0.7454442,
					0.922891,
					0.7112365,
					0.9480069,
					0.7583581,
					0.9588053,
					0.7211531,
					0.9983337,
					0.7626636,
					0.9983337,
					0.7246718,
					0.8734268,
					0.7708623,
					0.925589,
					0.8105438,
					0.9983337,
					0.8162426,
					0.8212647,
					0.8105438,
					0.8734268,
					0.8766438,
					0.9978603,
					0.8990951,
					0.748657,
					0.9019565,
					0.6197699,
					0.9758912,
					0.8750802,
					0.9731402,
					0.8750802,
					0.9731402,
					0.1041886,
					0.6969866,
					0.1239855,
					0.7253528,
					0.1437824,
					0.6969866,
					0.1239855,
					0.6836091,
					0.1734497,
					0.7112365,
					0.155766,
					0.7454442,
					0.2093638,
					0.7211531,
					0.1985654,
					0.7583581,
					0.07452133,
					0.7112365,
					0.09220496,
					0.7454442,
					0.1239855,
					0.7708623,
					0.1761476,
					0.8105438,
					0.03860712,
					0.7211531,
					0.04940557,
					0.7583581,
					0.07182345,
					0.8105438,
					0.1239855,
					0.8706206,
					-0.0009213686,
					0.7246718,
					-0.0009213686,
					0.7626636,
					-0.0009213686,
					0.8162426,
					-0.0009213686,
					0.9020402,
					0.1294726,
					0.9717647,
					0.3737993,
					0.3181914,
					0.3737993,
					0.348428,
					0.401279,
					0.3431527,
					0.3935962,
					0.3048138,
					0.4309353,
					0.3335016,
					0.4232635,
					0.2905639,
					0.4638988,
					0.3260186,
					0.4591776,
					0.2806473,
					0.4987062,
					0.3230592,
					0.4987062,
					0.2771286,
					0.4032414,
					0.3898893,
					0.3737993,
					0.3928966,
					0.4337836,
					0.3841356,
					0.4658029,
					0.3790208,
					0.4987062,
					0.3767318,
					0.4038135,
					0.4436346,
					0.3737993,
					0.4450004,
					0.4346031,
					0.4409079,
					0.4663434,
					0.4382135,
					0.4987062,
					0.4369167,
					0.403799,
					0.5009002,
					0.3737993,
					0.5009002,
					0.4345824,
					0.5009002,
					0.4663283,
					0.5009002,
					0.4987062,
					0.5009002,
					0.531069,
					0.4382135,
					0.5316095,
					0.3790208,
					0.5628092,
					0.4409079,
					0.5636287,
					0.3841356,
					0.5935988,
					0.4436346,
					0.5941709,
					0.3898893,
					0.6236131,
					0.4450004,
					0.6236131,
					0.3928966,
					0.5961333,
					0.3431527,
					0.6236131,
					0.348428,
					0.6038162,
					0.3048138,
					0.6236131,
					0.3181914,
					0.6236131,
					0.5009002,
					0.5936133,
					0.5009002,
					0.5741488,
					0.2905639,
					0.566477,
					0.3335016,
					0.56283,
					0.5009002,
					0.5382347,
					0.2806473,
					0.5335135,
					0.3260186,
					0.6236131,
					0.5568,
					0.5935988,
					0.5581658,
					0.6236131,
					0.6089039,
					0.5941709,
					0.6119112,
					0.6236131,
					0.6533725,
					0.5961334,
					0.6586478,
					0.6236131,
					0.683609,
					0.6038162,
					0.6969866,
					0.5664771,
					0.6682988,
					0.5741488,
					0.7112365,
					0.5335135,
					0.6757817,
					0.5382347,
					0.7211531,
					0.4987062,
					0.6787412,
					0.4987062,
					0.7246718,
					0.5636287,
					0.6176648,
					0.5316095,
					0.6227795,
					0.4987062,
					0.6250687,
					0.5628092,
					0.5608926,
					0.531069,
					0.563587,
					0.4987062,
					0.5648838,
					0.5310841,
					0.5009002,
					0.4638988,
					0.6757817,
					0.4591776,
					0.7211531,
					0.4309353,
					0.6682988,
					0.4232635,
					0.7112365,
					0.4012789,
					0.6586478,
					0.3935962,
					0.6969866,
					0.3737993,
					0.6533725,
					0.3737993,
					0.683609,
					0.3737993,
					0.6089039,
					0.4032414,
					0.6119112,
					0.3737993,
					0.5568,
					0.4038135,
					0.5581658,
					0.4337836,
					0.6176648,
					0.4346031,
					0.5608926,
					0.4658029,
					0.6227795,
					0.4663434,
					0.563587,
					0.6236131,
					0.3181914,
					0.6236131,
					0.348428,
					0.6510928,
					0.3431527,
					0.6434099,
					0.3048138,
					0.6807491,
					0.3335016,
					0.6730773,
					0.2905639,
					0.7137126,
					0.3260186,
					0.7089914,
					0.2806473,
					0.74852,
					0.3230592,
					0.74852,
					0.2771286,
					0.6530552,
					0.3898893,
					0.6236131,
					0.3928966,
					0.6835974,
					0.3841356,
					0.7156168,
					0.3790208,
					0.74852,
					0.3767318,
					0.6536273,
					0.4436346,
					0.6236131,
					0.4450004,
					0.684417,
					0.4409079,
					0.7161572,
					0.4382135,
					0.74852,
					0.4369167,
					0.6536129,
					0.5009002,
					0.6236131,
					0.5009002,
					0.6843961,
					0.5009002,
					0.7161421,
					0.5009002,
					0.74852,
					0.5009002,
					0.7808827,
					0.4382135,
					0.7814232,
					0.3790208,
					0.8126229,
					0.4409079,
					0.8134426,
					0.3841356,
					0.8434125,
					0.4436346,
					0.8439847,
					0.3898893,
					0.8734268,
					0.4450004,
					0.8734268,
					0.3928966,
					0.8459471,
					0.3431527,
					0.8734268,
					0.348428,
					0.8536299,
					0.3048138,
					0.8734268,
					0.3181914,
					0.8734268,
					0.5009002,
					0.8434271,
					0.5009002,
					0.8239627,
					0.2905639,
					0.8162909,
					0.3335016,
					0.8126438,
					0.5009002,
					0.7880484,
					0.2806473,
					0.7833273,
					0.3260186,
					0.8734268,
					0.5568,
					0.8434125,
					0.5581658,
					0.8734268,
					0.6089039,
					0.8439847,
					0.6119112,
					0.8734268,
					0.6533725,
					0.8459472,
					0.6586478,
					0.8734268,
					0.683609,
					0.8536299,
					0.6969866,
					0.8162909,
					0.6682988,
					0.8239627,
					0.7112365,
					0.7833273,
					0.6757817,
					0.7880484,
					0.7211531,
					0.74852,
					0.6787412,
					0.74852,
					0.7246718,
					0.8134426,
					0.6176648,
					0.7814232,
					0.6227797,
					0.74852,
					0.6250687,
					0.8126229,
					0.5608926,
					0.7808827,
					0.563587,
					0.74852,
					0.5648838,
					0.7808979,
					0.5009002,
					0.7137126,
					0.6757817,
					0.7089914,
					0.7211531,
					0.6807491,
					0.6682988,
					0.6730773,
					0.7112365,
					0.6510928,
					0.6586478,
					0.6434099,
					0.6969866,
					0.6236131,
					0.6533725,
					0.6236131,
					0.683609,
					0.6236131,
					0.6089039,
					0.6530552,
					0.6119112,
					0.6236131,
					0.5568,
					0.6536273,
					0.5581658,
					0.6835974,
					0.6176648,
					0.684417,
					0.5608926,
					0.7156168,
					0.6227797,
					0.7161572,
					0.563587,
					0.8734268,
					0.3181914,
					0.8734268,
					0.348428,
					0.9009064,
					0.3431527,
					0.8932236,
					0.3048139,
					0.9305627,
					0.3335016,
					0.922891,
					0.2905639,
					0.9635264,
					0.3260186,
					0.9588053,
					0.2806473,
					0.9983337,
					0.3230592,
					0.9983337,
					0.2771286,
					0.902869,
					0.3898893,
					0.8734268,
					0.3928966,
					0.9334112,
					0.3841356,
					0.9654305,
					0.3790208,
					0.9983337,
					0.3767318,
					0.9034411,
					0.4436346,
					0.8734268,
					0.4450004,
					0.9342307,
					0.4409079,
					0.965971,
					0.4382135,
					0.9983337,
					0.4369167,
					0.9034266,
					0.5009002,
					0.8734268,
					0.5009002,
					0.9342099,
					0.5009002,
					0.9659559,
					0.5009002,
					0.9983337,
					0.5009002,
					0.9034411,
					0.5581658,
					0.8734268,
					0.5568,
					0.902869,
					0.6119112,
					0.8734268,
					0.6089039,
					0.9009064,
					0.6586478,
					0.8734268,
					0.6533725,
					0.8932238,
					0.6969866,
					0.8734268,
					0.683609,
					0.922891,
					0.7112365,
					0.9305627,
					0.6682988,
					0.9334112,
					0.6176648,
					0.9342307,
					0.5608926,
					0.9588053,
					0.7211531,
					0.9635264,
					0.6757817,
					0.9654305,
					0.6227797,
					0.965971,
					0.563587,
					0.9983337,
					0.7246718,
					0.9983337,
					0.6787412,
					0.9983337,
					0.6250687,
					0.9983337,
					0.5648838,
					0.1041886,
					0.3048139,
					0.09650582,
					0.3431527,
					0.1239855,
					0.348428,
					0.1239855,
					0.3181914,
					0.1239855,
					0.3928966,
					0.0945434,
					0.3898893,
					0.1239855,
					0.4450004,
					0.09397122,
					0.4436346,
					0.1239855,
					0.5009002,
					0.09398577,
					0.5009002,
					0.07452133,
					0.2905639,
					0.06684953,
					0.3335016,
					0.06400123,
					0.3841356,
					0.06318161,
					0.4409079,
					0.06320244,
					0.5009002,
					0.03860712,
					0.2806473,
					0.03388602,
					0.3260186,
					0.03198189,
					0.3790208,
					0.03144142,
					0.4382135,
					0.03145653,
					0.5009002,
					-0.0009213686,
					0.2771286,
					-0.0009213686,
					0.3230592,
					-0.0009213686,
					0.3767318,
					-0.0009213686,
					0.4369167,
					-0.0009213686,
					0.5009002,
					0.09397122,
					0.5581658,
					0.1239855,
					0.5568,
					0.1239855,
					0.6089039,
					0.0945434,
					0.6119112,
					0.1239855,
					0.6533725,
					0.09650585,
					0.6586478,
					0.1239855,
					0.6836091,
					0.1041886,
					0.6969866,
					0.06684953,
					0.6682988,
					0.07452133,
					0.7112365,
					0.03388602,
					0.6757817,
					0.03860712,
					0.7211531,
					-0.0009213686,
					0.6787412,
					-0.0009213686,
					0.7246718,
					0.06400123,
					0.6176648,
					0.03198189,
					0.6227797,
					-0.0009213686,
					0.6250687,
					0.06318161,
					0.5608926,
					0.03144142,
					0.563587,
					-0.0009213686,
					0.5648838,
					0.1239855,
					0.3181914,
					0.1239855,
					0.348428,
					0.1514652,
					0.3431527,
					0.1437824,
					0.3048138,
					0.1811215,
					0.3335016,
					0.1734497,
					0.2905639,
					0.214085,
					0.3260186,
					0.2093638,
					0.2806473,
					0.2488924,
					0.3230592,
					0.2488924,
					0.2771286,
					0.1534276,
					0.3898893,
					0.1239855,
					0.3928966,
					0.1839698,
					0.3841356,
					0.2159891,
					0.3790208,
					0.2488924,
					0.3767318,
					0.1539998,
					0.4436346,
					0.1239855,
					0.4450004,
					0.1847894,
					0.4409079,
					0.2165296,
					0.4382135,
					0.2488924,
					0.4369167,
					0.1539853,
					0.5009002,
					0.1239855,
					0.5009002,
					0.1847686,
					0.5009002,
					0.2165145,
					0.5009002,
					0.2488924,
					0.5009002,
					0.2812552,
					0.4382135,
					0.2817956,
					0.3790208,
					0.3129954,
					0.4409079,
					0.313815,
					0.3841356,
					0.343785,
					0.4436346,
					0.3443572,
					0.3898893,
					0.3737993,
					0.4450004,
					0.3737993,
					0.3928966,
					0.3463196,
					0.3431527,
					0.3737993,
					0.348428,
					0.3540024,
					0.3048138,
					0.3737993,
					0.3181914,
					0.3737993,
					0.5009002,
					0.3437995,
					0.5009002,
					0.3243351,
					0.2905639,
					0.3166633,
					0.3335016,
					0.3130162,
					0.5009002,
					0.2884209,
					0.2806473,
					0.2836998,
					0.3260186,
					0.3737993,
					0.5568,
					0.343785,
					0.5581658,
					0.3737993,
					0.6089039,
					0.3443572,
					0.6119112,
					0.3737993,
					0.6533725,
					0.3463196,
					0.6586478,
					0.3737993,
					0.683609,
					0.3540024,
					0.6969866,
					0.3166633,
					0.6682988,
					0.3243351,
					0.7112365,
					0.2836998,
					0.6757817,
					0.2884209,
					0.7211531,
					0.2488924,
					0.6787412,
					0.2488924,
					0.7246718,
					0.313815,
					0.6176648,
					0.2817956,
					0.6227797,
					0.2488924,
					0.6250687,
					0.3129954,
					0.5608926,
					0.2812552,
					0.563587,
					0.2488924,
					0.5648838,
					0.2812703,
					0.5009002,
					0.214085,
					0.6757817,
					0.2093638,
					0.7211531,
					0.1811215,
					0.6682988,
					0.1734497,
					0.7112365,
					0.1514652,
					0.6586478,
					0.1437824,
					0.6969866,
					0.1239855,
					0.6533725,
					0.1239855,
					0.6836091,
					0.1239855,
					0.6089039,
					0.1534276,
					0.6119112,
					0.1239855,
					0.5568,
					0.1539998,
					0.5581658,
					0.1839698,
					0.6176648,
					0.1847894,
					0.5608926,
					0.2159891,
					0.6227797,
					0.2165296,
					0.563587
				],
				"normals": [
					0.5773503,
					-0.5773503,
					-0.5773503,
					0.6201137,
					-0.6201137,
					-0.4805394,
					0.4963527,
					-0.7122274,
					-0.4963527,
					0.4805394,
					-0.6201137,
					-0.6201137,
					0.3492379,
					-0.7746143,
					-0.5272623,
					0.3410981,
					-0.6647,
					-0.6647,
					0.1805437,
					-0.8148397,
					-0.5508541,
					0.1769334,
					-0.6959506,
					-0.6959506,
					0,
					-0.8287514,
					-0.559617,
					0,
					-0.7071068,
					-0.7071068,
					0.5272623,
					-0.7746143,
					-0.3492379,
					0.6647,
					-0.6647,
					-0.3410981,
					0.3670194,
					-0.8547476,
					-0.3670194,
					0.1887311,
					-0.9043397,
					-0.3828188,
					0,
					-0.9212493,
					-0.3889727,
					0.5508541,
					-0.8148397,
					-0.1805437,
					0.6959506,
					-0.6959507,
					-0.1769334,
					0.3828188,
					-0.9043397,
					-0.1887311,
					0.1982114,
					-0.9599085,
					-0.1982114,
					0,
					-0.9791253,
					-0.2032574,
					0.559617,
					-0.8287514,
					0,
					0.7071068,
					-0.7071068,
					0,
					0.3889727,
					-0.9212493,
					0,
					0.2032573,
					-0.9791253,
					0,
					0.2032573,
					-0.9791253,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					-0.1982115,
					-0.9599085,
					-0.1982117,
					-0.1887312,
					-0.9043397,
					-0.3828188,
					-0.382819,
					-0.9043396,
					-0.1887314,
					-0.3670194,
					-0.8547476,
					-0.3670194,
					-0.5508541,
					-0.8148397,
					-0.1805437,
					-0.5272623,
					-0.7746143,
					-0.3492379,
					-0.6959506,
					-0.6959506,
					-0.1769334,
					-0.6647,
					-0.6647,
					-0.3410981,
					-0.4963527,
					-0.7122274,
					-0.4963527,
					-0.6201137,
					-0.6201137,
					-0.4805394,
					-0.48054,
					-0.620114,
					-0.6201128,
					-0.5773503,
					-0.5773503,
					-0.5773503,
					-0.7071068,
					-0.7071068,
					0,
					-0.559617,
					-0.8287514,
					0,
					-0.3410983,
					-0.6647008,
					-0.664699,
					-0.3492379,
					-0.7746143,
					-0.5272623,
					-0.3889731,
					-0.9212492,
					0,
					-0.176933,
					-0.695951,
					-0.6959504,
					-0.1805437,
					-0.8148397,
					-0.5508541,
					-0.2032576,
					-0.9791253,
					0,
					0,
					-1,
					0,
					-0.5773503,
					-0.5773503,
					0.5773503,
					-0.6201128,
					-0.620114,
					0.48054,
					-0.4963527,
					-0.7122274,
					0.4963527,
					-0.4805394,
					-0.6201137,
					0.6201137,
					-0.3492379,
					-0.7746143,
					0.5272623,
					-0.3410979,
					-0.6646999,
					0.6647002,
					-0.1805437,
					-0.8148397,
					0.5508541,
					-0.1769333,
					-0.6959505,
					0.6959509,
					0,
					-0.8287514,
					0.559617,
					0,
					-0.7071066,
					0.7071069,
					-0.5272623,
					-0.7746143,
					0.3492379,
					-0.664699,
					-0.6647008,
					0.3410983,
					-0.3670194,
					-0.8547476,
					0.3670194,
					-0.1887312,
					-0.9043397,
					0.3828188,
					0,
					-0.9212493,
					0.3889727,
					-0.5508541,
					-0.8148397,
					0.1805437,
					-0.6959504,
					-0.695951,
					0.176933,
					-0.382819,
					-0.9043396,
					0.1887314,
					-0.1982115,
					-0.9599085,
					0.1982117,
					0,
					-0.9791253,
					0.2032574,
					-0.559617,
					-0.8287514,
					0,
					-0.7071068,
					-0.7071068,
					0,
					-0.3889731,
					-0.9212492,
					0,
					-0.2032576,
					-0.9791253,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0.1982114,
					-0.9599085,
					0.1982114,
					0.1887311,
					-0.9043397,
					0.3828188,
					0.3828188,
					-0.9043397,
					0.1887311,
					0.3670194,
					-0.8547476,
					0.3670194,
					0.5508541,
					-0.8148397,
					0.1805437,
					0.5272623,
					-0.7746143,
					0.3492379,
					0.6959507,
					-0.6959506,
					0.1769334,
					0.6647,
					-0.6647,
					0.3410981,
					0.4963527,
					-0.7122274,
					0.4963527,
					0.6201137,
					-0.6201137,
					0.4805394,
					0.48054,
					-0.620114,
					0.6201128,
					0.5773503,
					-0.5773503,
					0.5773503,
					0.3410981,
					-0.6647007,
					0.6646991,
					0.3492379,
					-0.7746143,
					0.5272623,
					0.1769328,
					-0.6959507,
					0.6959507,
					0.1805438,
					-0.8148397,
					0.5508541,
					0,
					-1,
					0,
					0.2032573,
					-0.9791253,
					0,
					0.5770534,
					0.5779435,
					-0.5770534,
					0.4803619,
					0.6204594,
					-0.6199054,
					0.4962236,
					0.7124074,
					-0.4962236,
					0.6199054,
					0.6204594,
					-0.4803619,
					0.5271254,
					0.7745599,
					-0.3495651,
					0.6645957,
					0.6646522,
					-0.3413944,
					0.5506793,
					0.8149741,
					-0.1804701,
					0.6960512,
					0.6958691,
					-0.176858,
					0.5594022,
					0.8288963,
					0,
					0.7072056,
					0.707008,
					0,
					0.3495651,
					0.7745599,
					-0.5271254,
					0.3413944,
					0.6646522,
					-0.6645957,
					0.3668588,
					0.8548855,
					-0.3668588,
					0.3822528,
					0.9046206,
					-0.188532,
					0.3883412,
					0.9215156,
					0,
					0.18047,
					0.8149742,
					-0.5506793,
					0.1768579,
					0.6958691,
					-0.6960513,
					0.1885317,
					0.9046208,
					-0.3822526,
					0.1972087,
					0.9603215,
					-0.1972089,
					0.2014461,
					0.9794996,
					0,
					0,
					0.8288963,
					-0.5594023,
					0,
					0.707008,
					-0.7072056,
					0,
					0.9215158,
					-0.3883408,
					0,
					0.9794996,
					-0.2014458,
					0,
					1,
					0,
					0,
					1,
					0,
					0.1972087,
					0.9603215,
					0.1972089,
					0.3822529,
					0.9046206,
					0.188532,
					0.1885318,
					0.9046208,
					0.3822526,
					0.3668588,
					0.8548855,
					0.3668588,
					0.1804701,
					0.8149741,
					0.5506793,
					0.3495651,
					0.7745599,
					0.5271254,
					0.1768581,
					0.6958693,
					0.6960511,
					0.3413946,
					0.6646523,
					0.6645954,
					0.4962236,
					0.7124074,
					0.4962236,
					0.4803619,
					0.6204594,
					0.6199054,
					0.6199054,
					0.6204594,
					0.4803619,
					0.5770534,
					0.5779435,
					0.5770534,
					0,
					0.707008,
					0.7072056,
					0,
					0.8288963,
					0.5594022,
					0.6645954,
					0.6646523,
					0.3413946,
					0.5271254,
					0.7745599,
					0.3495651,
					0,
					0.9215159,
					0.3883407,
					0.6960511,
					0.6958694,
					0.1768581,
					0.5506793,
					0.8149742,
					0.18047,
					-0.1768581,
					0.6958694,
					0.6960511,
					-0.18047,
					0.8149742,
					0.5506793,
					-0.3413946,
					0.6646523,
					0.6645954,
					-0.3495651,
					0.7745599,
					0.5271254,
					-0.4803619,
					0.6204594,
					0.6199054,
					-0.4962236,
					0.7124074,
					0.4962236,
					-0.5770534,
					0.5779435,
					0.5770534,
					-0.6199054,
					0.6204594,
					0.4803619,
					-0.5271254,
					0.7745599,
					0.3495651,
					-0.6645954,
					0.6646523,
					0.3413946,
					-0.5506793,
					0.8149742,
					0.1804701,
					-0.6960511,
					0.6958694,
					0.1768581,
					-0.5594022,
					0.8288963,
					0,
					-0.7072056,
					0.707008,
					0,
					-0.3668588,
					0.8548855,
					0.3668588,
					-0.3822526,
					0.9046208,
					0.1885318,
					-0.3883408,
					0.9215159,
					0,
					-0.1885318,
					0.9046208,
					0.3822526,
					-0.1972086,
					0.9603216,
					0.1972086,
					-0.2014458,
					0.9794997,
					0,
					0,
					0.9794996,
					0.2014458,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					-0.6199054,
					0.6204594,
					-0.4803619,
					-0.4962236,
					0.7124074,
					-0.4962236,
					-0.4803619,
					0.6204594,
					-0.6199054,
					-0.5770534,
					0.5779435,
					-0.5770534,
					-0.3413942,
					0.6646523,
					-0.6645955,
					-0.3495646,
					0.7745602,
					-0.5271254,
					-0.1768579,
					0.6958694,
					-0.6960511,
					-0.1804698,
					0.8149742,
					-0.5506793,
					-0.6645954,
					0.6646523,
					-0.3413946,
					-0.5271254,
					0.7745599,
					-0.3495651,
					-0.3668587,
					0.8548855,
					-0.3668591,
					-0.1885316,
					0.9046206,
					-0.3822529,
					-0.6960511,
					0.6958694,
					-0.1768581,
					-0.5506793,
					0.8149742,
					-0.18047,
					-0.3822526,
					0.9046208,
					-0.1885318,
					-0.1972086,
					0.9603216,
					-0.1972086,
					-0.7072056,
					0.707008,
					0,
					-0.5594022,
					0.8288963,
					0,
					-0.3883408,
					0.9215159,
					0,
					-0.2014458,
					0.9794997,
					0,
					0,
					1,
					0,
					0.5773503,
					-0.5773503,
					-0.5773503,
					0.6201131,
					-0.4805407,
					-0.6201131,
					0.7122266,
					-0.4963542,
					-0.4963524,
					0.6201137,
					-0.6201137,
					-0.4805394,
					0.7746142,
					-0.5272629,
					-0.3492372,
					0.6647,
					-0.6647,
					-0.3410981,
					0.8148397,
					-0.5508541,
					-0.1805438,
					0.6959506,
					-0.6959507,
					-0.1769334,
					0.8287514,
					-0.559617,
					0,
					0.7071068,
					-0.7071068,
					0,
					0.7746139,
					-0.3492387,
					-0.5272623,
					0.6646999,
					-0.3410986,
					-0.6646998,
					0.8547479,
					-0.3670197,
					-0.3670183,
					0.9043396,
					-0.382819,
					-0.1887314,
					0.9212492,
					-0.3889731,
					0,
					0.8134452,
					-0.189825,
					-0.549794,
					0.694679,
					-0.1866611,
					-0.694679,
					0.9028698,
					-0.1970319,
					-0.3821057,
					0.9590998,
					-0.2040402,
					-0.1962021,
					0.9782798,
					-0.2072886,
					-0.0003374418,
					0.8290441,
					-0.009544022,
					-0.5591018,
					0.7070715,
					-0.009976584,
					-0.7070715,
					0.9214768,
					-0.00855847,
					-0.3883391,
					0.9797992,
					-0.007640349,
					-0.1998379,
					0.999975,
					-0.007027187,
					-0.0009141061,
					0.9593295,
					-0.204362,
					0.1947386,
					0.9043396,
					-0.382819,
					0.1887314,
					0.9037763,
					-0.1963431,
					0.3803126,
					0.8547479,
					-0.3670197,
					0.3670183,
					0.8145636,
					-0.1877707,
					0.5488426,
					0.7746139,
					-0.3492387,
					0.5272623,
					0.6950383,
					-0.1839666,
					0.6950383,
					0.6646999,
					-0.3410986,
					0.6646998,
					0.7122266,
					-0.4963542,
					0.4963524,
					0.6201131,
					-0.4805407,
					0.6201131,
					0.6201137,
					-0.6201137,
					0.4805394,
					0.5773503,
					-0.5773503,
					0.5773503,
					0.707078,
					-0.009016315,
					0.707078,
					0.8306221,
					-0.008560009,
					0.5567707,
					0.6647,
					-0.6647,
					0.3410981,
					0.7746142,
					-0.527263,
					0.3492371,
					0.9230274,
					-0.007569675,
					0.3846596,
					0.6959507,
					-0.6959506,
					0.1769334,
					0.8148397,
					-0.550854,
					0.1805437,
					0.6961852,
					0.1750802,
					0.6961846,
					0.8163346,
					0.1793894,
					0.5490147,
					0.6646252,
					0.3413929,
					0.6646233,
					0.7750265,
					0.3493735,
					0.5265663,
					0.6199811,
					0.4808831,
					0.6199798,
					0.7125368,
					0.4964059,
					0.4958554,
					0.5770534,
					0.5779435,
					0.5770534,
					0.6199054,
					0.6204594,
					0.4803619,
					0.7749057,
					0.5268649,
					0.3491912,
					0.6645954,
					0.6646523,
					0.3413946,
					0.8152629,
					0.5502449,
					0.1804915,
					0.6960511,
					0.6958694,
					0.1768581,
					0.829181,
					0.5589803,
					0,
					0.7072056,
					0.707008,
					0,
					0.8552524,
					0.3665192,
					0.3663428,
					0.9047235,
					0.3819526,
					0.1886469,
					0.921612,
					0.3881125,
					0,
					0.9055392,
					0.1888714,
					0.379903,
					0.960723,
					0.1975649,
					0.1948826,
					0.9797031,
					0.2004529,
					-0.0005754959,
					0.9804376,
					-0.006910108,
					0.1967086,
					0.8152629,
					0.5502449,
					-0.1804913,
					0.6960512,
					0.6958691,
					-0.176858,
					0.7749059,
					0.526865,
					-0.3491908,
					0.6645957,
					0.6646522,
					-0.3413944,
					0.7125368,
					0.4964059,
					-0.4958554,
					0.6199054,
					0.6204594,
					-0.4803619,
					0.6199811,
					0.4808831,
					-0.6199798,
					0.5770534,
					0.5779435,
					-0.5770534,
					0.6646252,
					0.3413929,
					-0.6646233,
					0.7750265,
					0.3493734,
					-0.5265662,
					0.6959636,
					0.1768336,
					-0.695963,
					0.8153886,
					0.1804795,
					-0.5500622,
					0.8552524,
					0.3665194,
					-0.3663425,
					0.9048201,
					0.1885902,
					-0.3817516,
					0.9047233,
					0.3819529,
					-0.1886469,
					0.9605871,
					0.1965227,
					-0.1965994,
					0.5773503,
					-0.5773503,
					0.5773503,
					0.6201131,
					-0.4805407,
					0.6201131,
					0.4963539,
					-0.4963539,
					0.7122259,
					0.48054,
					-0.620114,
					0.6201128,
					0.3492374,
					-0.527263,
					0.7746141,
					0.3410981,
					-0.6647007,
					0.6646991,
					0.1805425,
					-0.5508541,
					0.81484,
					0.1769328,
					-0.6959507,
					0.6959507,
					0,
					-0.559617,
					0.8287514,
					0,
					-0.7071066,
					0.7071069,
					0.5272629,
					-0.3492379,
					0.7746139,
					0.6646999,
					-0.3410986,
					0.6646998,
					0.3670184,
					-0.3670188,
					0.8547482,
					0.1887308,
					-0.3828188,
					0.9043397,
					0,
					-0.3889733,
					0.921249,
					0.5488426,
					-0.1877707,
					0.8145636,
					0.6950383,
					-0.1839666,
					0.6950383,
					0.3803126,
					-0.1963431,
					0.9037763,
					0.1947386,
					-0.204362,
					0.9593295,
					0,
					-0.2076114,
					0.9782113,
					0.5567707,
					-0.008560009,
					0.8306221,
					0.707078,
					-0.009016315,
					0.707078,
					0.3846596,
					-0.007569675,
					0.9230274,
					0.1967088,
					-0.006910203,
					0.9804376,
					0,
					-0.006783585,
					0.999977,
					-0.1947386,
					-0.204362,
					0.9593295,
					-0.1887312,
					-0.3828192,
					0.9043395,
					-0.380313,
					-0.1963435,
					0.903776,
					-0.3670192,
					-0.3670197,
					0.8547476,
					-0.5488427,
					-0.1877716,
					0.8145635,
					-0.5272623,
					-0.3492379,
					0.7746143,
					-0.6950381,
					-0.1839675,
					0.6950381,
					-0.6647,
					-0.3410981,
					0.6647,
					-0.4963527,
					-0.4963527,
					0.7122274,
					-0.6201137,
					-0.4805394,
					0.6201137,
					-0.4805394,
					-0.6201137,
					0.6201137,
					-0.5773503,
					-0.5773503,
					0.5773503,
					-0.707078,
					-0.009016315,
					0.707078,
					-0.5567707,
					-0.008560009,
					0.8306221,
					-0.3410979,
					-0.6646999,
					0.6647002,
					-0.3492375,
					-0.5272624,
					0.7746145,
					-0.3846596,
					-0.007569675,
					0.9230274,
					-0.1769333,
					-0.6959505,
					0.6959509,
					-0.1805434,
					-0.5508541,
					0.8148397,
					-0.696185,
					0.1750798,
					0.696185,
					-0.5490147,
					0.1793885,
					0.8163348,
					-0.6646242,
					0.3413932,
					0.6646242,
					-0.5265663,
					0.3493741,
					0.7750263,
					-0.6199802,
					0.4808837,
					0.6199802,
					-0.495855,
					0.4964073,
					0.712536,
					-0.5770534,
					0.5779435,
					0.5770534,
					-0.4803619,
					0.6204594,
					0.6199054,
					-0.3491905,
					0.5268657,
					0.7749056,
					-0.3413946,
					0.6646523,
					0.6645954,
					-0.1804915,
					0.5502449,
					0.8152629,
					-0.1768581,
					0.6958694,
					0.6960511,
					0,
					0.5589803,
					0.829181,
					0,
					0.707008,
					0.7072056,
					-0.3663416,
					0.3665195,
					0.8552527,
					-0.1886471,
					0.3819528,
					0.9047233,
					0,
					0.3881129,
					0.9216118,
					-0.3799026,
					0.188871,
					0.9055395,
					-0.1948829,
					0.1975651,
					0.9607229,
					0,
					0.2010102,
					0.9795892,
					-0.1967087,
					-0.006910208,
					0.9804376,
					0.1804916,
					0.5502448,
					0.8152628,
					0.1768581,
					0.6958693,
					0.6960511,
					0.3491904,
					0.5268656,
					0.7749056,
					0.3413946,
					0.6646523,
					0.6645954,
					0.495855,
					0.4964073,
					0.712536,
					0.4803619,
					0.6204594,
					0.6199054,
					0.6199811,
					0.4808831,
					0.6199798,
					0.5770534,
					0.5779435,
					0.5770534,
					0.6646252,
					0.3413929,
					0.6646233,
					0.5265663,
					0.3493741,
					0.7750263,
					0.6961852,
					0.1750802,
					0.6961846,
					0.5490148,
					0.1793885,
					0.8163348,
					0.3663416,
					0.3665195,
					0.8552527,
					0.3799026,
					0.188871,
					0.9055395,
					0.1886472,
					0.3819528,
					0.9047233,
					0.194883,
					0.1975651,
					0.9607229,
					-0.5773503,
					-0.5773503,
					0.5773503,
					-0.6201137,
					-0.4805394,
					0.6201137,
					-0.7122266,
					-0.4963524,
					0.4963542,
					-0.6201128,
					-0.620114,
					0.48054,
					-0.7746139,
					-0.5272623,
					0.3492387,
					-0.664699,
					-0.6647008,
					0.3410983,
					-0.8148399,
					-0.5508541,
					0.1805429,
					-0.6959504,
					-0.695951,
					0.176933,
					-0.8287514,
					-0.559617,
					0,
					-0.7071068,
					-0.7071068,
					0,
					-0.7746142,
					-0.3492371,
					0.527263,
					-0.6647,
					-0.3410981,
					0.6647,
					-0.8547479,
					-0.3670183,
					0.3670197,
					-0.90434,
					-0.3828184,
					0.1887307,
					-0.9212493,
					-0.3889727,
					0,
					-0.8145635,
					-0.1877716,
					0.5488427,
					-0.6950381,
					-0.1839675,
					0.6950381,
					-0.903776,
					-0.1963435,
					0.380313,
					-0.9593295,
					-0.2043618,
					0.1947383,
					-0.9782799,
					-0.2072884,
					-0.0003373459,
					-0.8306221,
					-0.008560009,
					0.5567707,
					-0.707078,
					-0.009016315,
					0.707078,
					-0.9230274,
					-0.007569675,
					0.3846596,
					-0.9804376,
					-0.006910289,
					0.1967086,
					-0.999975,
					-0.00702751,
					-0.0009139705,
					-0.8163348,
					0.1793885,
					0.5490148,
					-0.696185,
					0.1750798,
					0.696185,
					-0.7750263,
					0.3493741,
					0.5265663,
					-0.6646242,
					0.3413932,
					0.6646242,
					-0.712536,
					0.4964073,
					0.495855,
					-0.6199802,
					0.4808837,
					0.6199802,
					-0.6199054,
					0.6204594,
					0.4803619,
					-0.5770534,
					0.5779435,
					0.5770534,
					-0.6645954,
					0.6646523,
					0.3413946,
					-0.7749056,
					0.5268656,
					0.3491904,
					-0.8552527,
					0.3665195,
					0.3663416,
					-0.9055395,
					0.188871,
					0.3799026,
					-0.6960511,
					0.6958694,
					0.1768581,
					-0.8152628,
					0.5502448,
					0.1804915,
					-0.9047233,
					0.3819528,
					0.1886472,
					-0.9607229,
					0.1975651,
					0.194883,
					-0.7072056,
					0.707008,
					0,
					-0.829181,
					0.5589803,
					0,
					-0.9216118,
					0.3881128,
					0,
					-0.9797031,
					0.2004532,
					-0.0005753229,
					-0.6201137,
					-0.6201137,
					-0.4805394,
					-0.7122274,
					-0.4963527,
					-0.4963527,
					-0.6201137,
					-0.4805394,
					-0.6201137,
					-0.5773503,
					-0.5773503,
					-0.5773503,
					-0.6647,
					-0.3410981,
					-0.6647,
					-0.7746143,
					-0.3492379,
					-0.5272623,
					-0.6946788,
					-0.186662,
					-0.6946788,
					-0.813445,
					-0.1898259,
					-0.5497938,
					-0.7070716,
					-0.009976553,
					-0.7070715,
					-0.8290441,
					-0.009543983,
					-0.5591018,
					-0.6647,
					-0.6647,
					-0.3410981,
					-0.7746143,
					-0.5272623,
					-0.3492379,
					-0.8547476,
					-0.3670194,
					-0.3670194,
					-0.9028695,
					-0.1970323,
					-0.382106,
					-0.9214768,
					-0.008558429,
					-0.3883391,
					-0.6959506,
					-0.6959506,
					-0.1769334,
					-0.8148397,
					-0.550854,
					-0.1805437,
					-0.9043397,
					-0.3828188,
					-0.1887311,
					-0.9590999,
					-0.2040401,
					-0.1962017,
					-0.9797992,
					-0.007640469,
					-0.1998378,
					-0.7071068,
					-0.7071068,
					0,
					-0.8287514,
					-0.559617,
					0,
					-0.9212493,
					-0.3889727,
					0,
					-0.9782799,
					-0.2072884,
					-0.0003373459,
					-0.999975,
					-0.00702751,
					-0.0009139705,
					-0.8153889,
					0.1804786,
					-0.5500622,
					-0.6959634,
					0.1768332,
					-0.6959634,
					-0.6646242,
					0.3413932,
					-0.6646242,
					-0.7750263,
					0.3493741,
					-0.5265663,
					-0.6199802,
					0.4808837,
					-0.6199802,
					-0.712536,
					0.4964073,
					-0.495855,
					-0.5770534,
					0.5779435,
					-0.5770534,
					-0.6199054,
					0.6204594,
					-0.4803619,
					-0.7749056,
					0.5268657,
					-0.3491905,
					-0.6645954,
					0.6646523,
					-0.3413946,
					-0.8152629,
					0.5502449,
					-0.1804915,
					-0.6960511,
					0.6958694,
					-0.1768581,
					-0.829181,
					0.5589803,
					0,
					-0.7072056,
					0.707008,
					0,
					-0.8552527,
					0.3665195,
					-0.3663416,
					-0.9047233,
					0.3819528,
					-0.1886472,
					-0.9216118,
					0.3881128,
					0,
					-0.9048204,
					0.1885898,
					-0.3817511,
					-0.960587,
					0.1965229,
					-0.1965996,
					-0.9797031,
					0.2004532,
					-0.0005753229,
					-0.5773503,
					-0.5773503,
					-0.5773503,
					-0.6201137,
					-0.4805394,
					-0.6201137,
					-0.4963542,
					-0.4963524,
					-0.7122266,
					-0.48054,
					-0.620114,
					-0.6201128,
					-0.3492387,
					-0.5272623,
					-0.7746139,
					-0.3410983,
					-0.6647008,
					-0.664699,
					-0.1805428,
					-0.5508541,
					-0.8148399,
					-0.176933,
					-0.695951,
					-0.6959504,
					0,
					-0.559617,
					-0.8287514,
					0,
					-0.7071068,
					-0.7071068,
					-0.527263,
					-0.3492371,
					-0.7746142,
					-0.6647,
					-0.3410981,
					-0.6647,
					-0.3670197,
					-0.3670183,
					-0.8547479,
					-0.1887309,
					-0.3828185,
					-0.9043399,
					0,
					-0.3889731,
					-0.9212492,
					-0.5497938,
					-0.1898259,
					-0.813445,
					-0.6946788,
					-0.186662,
					-0.6946788,
					-0.382106,
					-0.1970323,
					-0.9028695,
					-0.196202,
					-0.2040402,
					-0.9590998,
					0,
					-0.2069658,
					-0.9783482,
					-0.5591018,
					-0.009543994,
					-0.8290441,
					-0.7070716,
					-0.009976553,
					-0.7070715,
					-0.3883391,
					-0.008558438,
					-0.9214768,
					-0.199838,
					-0.007640417,
					-0.9797992,
					0,
					-0.007271087,
					-0.9999735,
					0.196202,
					-0.2040401,
					-0.9590998,
					0.1887314,
					-0.382819,
					-0.9043396,
					0.3821056,
					-0.1970319,
					-0.9028698,
					0.3670183,
					-0.3670197,
					-0.8547479,
					0.549794,
					-0.189825,
					-0.8134452,
					0.5272623,
					-0.3492387,
					-0.7746139,
					0.694679,
					-0.1866611,
					-0.694679,
					0.6646999,
					-0.3410986,
					-0.6646998,
					0.4963524,
					-0.4963542,
					-0.7122266,
					0.6201131,
					-0.4805407,
					-0.6201131,
					0.4805394,
					-0.6201137,
					-0.6201137,
					0.5773503,
					-0.5773503,
					-0.5773503,
					0.7070715,
					-0.009976584,
					-0.7070715,
					0.5591018,
					-0.009544019,
					-0.8290441,
					0.3410981,
					-0.6647,
					-0.6647,
					0.3492371,
					-0.527263,
					-0.7746142,
					0.388339,
					-0.008558459,
					-0.9214768,
					0.1769334,
					-0.6959506,
					-0.6959506,
					0.1805437,
					-0.5508541,
					-0.8148397,
					0.6959636,
					0.1768336,
					-0.695963,
					0.5500622,
					0.1804786,
					-0.8153889,
					0.6646252,
					0.3413929,
					-0.6646233,
					0.5265663,
					0.3493741,
					-0.7750263,
					0.6199811,
					0.4808831,
					-0.6199798,
					0.495855,
					0.4964073,
					-0.712536,
					0.5770534,
					0.5779435,
					-0.5770534,
					0.4803619,
					0.6204594,
					-0.6199054,
					0.3491899,
					0.5268657,
					-0.7749057,
					0.3413944,
					0.6646522,
					-0.6645957,
					0.1804911,
					0.5502449,
					-0.8152629,
					0.1768579,
					0.6958691,
					-0.6960513,
					0,
					0.5589804,
					-0.8291808,
					0,
					0.707008,
					-0.7072056,
					0.3663414,
					0.3665197,
					-0.8552527,
					0.188647,
					0.3819531,
					-0.9047232,
					0,
					0.388113,
					-0.9216118,
					0.3817511,
					0.1885898,
					-0.9048204,
					0.1965995,
					0.1965229,
					-0.960587,
					0,
					0.1998962,
					-0.9798171,
					0.1998378,
					-0.007640359,
					-0.9797992,
					-0.1804913,
					0.5502449,
					-0.8152629,
					-0.1768579,
					0.6958694,
					-0.6960511,
					-0.3491899,
					0.5268657,
					-0.7749057,
					-0.3413942,
					0.6646523,
					-0.6645955,
					-0.495855,
					0.4964073,
					-0.712536,
					-0.4803619,
					0.6204594,
					-0.6199054,
					-0.6199802,
					0.4808837,
					-0.6199802,
					-0.5770534,
					0.5779435,
					-0.5770534,
					-0.6646242,
					0.3413932,
					-0.6646242,
					-0.5265663,
					0.3493741,
					-0.7750263,
					-0.6959634,
					0.1768332,
					-0.6959634,
					-0.5500622,
					0.1804786,
					-0.8153889,
					-0.3663414,
					0.3665197,
					-0.8552527,
					-0.3817512,
					0.1885898,
					-0.9048204,
					-0.1886472,
					0.3819532,
					-0.9047232,
					-0.1965997,
					0.1965229,
					-0.960587
				]
			}
		]
	};

/***/ },
/* 48 */
/***/ function(module, exports) {

	module.exports = {
		"meshes": [
			{
				"indices": [
					0,
					1,
					2,
					0,
					2,
					3,
					3,
					2,
					4,
					3,
					4,
					5,
					5,
					4,
					6,
					5,
					6,
					7,
					2,
					8,
					4,
					2,
					9,
					8,
					1,
					9,
					2,
					8,
					9,
					10,
					8,
					10,
					11,
					10,
					12,
					11,
					10,
					13,
					12,
					14,
					12,
					13,
					14,
					15,
					12,
					16,
					15,
					14,
					16,
					17,
					15,
					18,
					17,
					16,
					18,
					19,
					17,
					19,
					20,
					17,
					19,
					21,
					20,
					22,
					19,
					18,
					22,
					23,
					19,
					23,
					21,
					19,
					24,
					23,
					22,
					24,
					25,
					23,
					25,
					26,
					23,
					23,
					26,
					21,
					25,
					27,
					26,
					28,
					25,
					24,
					28,
					29,
					25,
					29,
					27,
					25,
					30,
					29,
					28,
					31,
					30,
					28,
					31,
					28,
					32,
					32,
					28,
					24,
					30,
					33,
					29,
					33,
					34,
					29,
					29,
					34,
					27,
					33,
					35,
					34,
					36,
					33,
					30,
					36,
					37,
					33,
					37,
					35,
					33,
					38,
					37,
					36,
					38,
					39,
					37,
					39,
					40,
					37,
					37,
					40,
					35,
					39,
					41,
					40,
					42,
					39,
					38,
					42,
					43,
					39,
					43,
					41,
					39,
					44,
					43,
					42,
					44,
					45,
					43,
					45,
					46,
					43,
					43,
					46,
					41,
					45,
					47,
					46,
					48,
					45,
					44,
					48,
					49,
					45,
					49,
					47,
					45,
					50,
					49,
					48,
					50,
					51,
					49,
					51,
					52,
					49,
					49,
					52,
					47,
					51,
					53,
					52,
					54,
					51,
					50,
					54,
					55,
					51,
					55,
					53,
					51,
					55,
					56,
					53,
					53,
					57,
					52,
					53,
					58,
					57,
					56,
					58,
					53,
					58,
					59,
					57,
					58,
					60,
					59,
					56,
					61,
					58,
					61,
					60,
					58,
					61,
					62,
					60,
					52,
					57,
					63,
					52,
					63,
					47,
					47,
					63,
					64,
					63,
					65,
					64,
					63,
					66,
					65,
					57,
					59,
					66,
					57,
					66,
					63,
					47,
					64,
					46,
					46,
					64,
					67,
					46,
					67,
					41,
					41,
					67,
					68,
					67,
					69,
					68,
					67,
					70,
					69,
					64,
					65,
					70,
					64,
					70,
					67,
					41,
					68,
					40,
					40,
					68,
					71,
					40,
					71,
					35,
					35,
					71,
					72,
					71,
					73,
					72,
					71,
					74,
					73,
					68,
					69,
					74,
					68,
					74,
					71,
					35,
					72,
					34,
					66,
					75,
					65,
					66,
					76,
					75,
					76,
					77,
					75,
					76,
					78,
					77,
					79,
					78,
					76,
					59,
					79,
					76,
					60,
					79,
					59,
					60,
					80,
					79,
					80,
					81,
					79,
					79,
					81,
					78,
					80,
					82,
					81,
					62,
					80,
					60,
					62,
					83,
					80,
					83,
					82,
					80,
					83,
					84,
					82,
					59,
					76,
					66,
					82,
					85,
					81,
					82,
					86,
					85,
					84,
					86,
					82,
					84,
					87,
					86,
					78,
					88,
					77,
					78,
					89,
					88,
					81,
					85,
					89,
					81,
					89,
					78,
					77,
					88,
					90,
					77,
					90,
					91,
					75,
					77,
					91,
					75,
					91,
					92,
					92,
					91,
					93,
					92,
					93,
					94,
					70,
					92,
					94,
					70,
					94,
					69,
					65,
					75,
					92,
					65,
					92,
					70,
					69,
					94,
					95,
					69,
					95,
					74,
					74,
					95,
					96,
					95,
					97,
					96,
					95,
					98,
					97,
					94,
					93,
					98,
					94,
					98,
					95,
					74,
					96,
					73,
					91,
					90,
					99,
					91,
					99,
					93,
					98,
					100,
					97,
					98,
					101,
					100,
					93,
					99,
					101,
					93,
					101,
					98,
					73,
					96,
					102,
					73,
					102,
					103,
					72,
					73,
					103,
					72,
					103,
					104,
					104,
					103,
					105,
					104,
					105,
					106,
					27,
					104,
					106,
					27,
					106,
					26,
					34,
					72,
					104,
					34,
					104,
					27,
					26,
					106,
					107,
					26,
					107,
					21,
					21,
					107,
					108,
					21,
					108,
					20,
					106,
					105,
					109,
					106,
					109,
					107,
					109,
					108,
					107,
					20,
					108,
					110,
					20,
					110,
					111,
					17,
					20,
					111,
					17,
					111,
					15,
					112,
					111,
					110,
					112,
					113,
					111,
					15,
					111,
					113,
					114,
					113,
					112,
					11,
					113,
					114,
					115,
					11,
					114,
					115,
					8,
					11,
					11,
					12,
					113,
					15,
					113,
					12,
					4,
					8,
					115,
					4,
					115,
					6,
					116,
					115,
					114,
					6,
					115,
					116,
					116,
					114,
					117,
					114,
					112,
					117,
					6,
					116,
					118,
					7,
					6,
					118,
					7,
					118,
					119,
					119,
					118,
					120,
					119,
					120,
					121,
					118,
					116,
					122,
					118,
					122,
					120,
					122,
					116,
					117,
					121,
					120,
					123,
					121,
					123,
					124,
					124,
					123,
					125,
					124,
					125,
					126,
					120,
					122,
					127,
					120,
					127,
					123,
					123,
					127,
					128,
					123,
					128,
					125,
					126,
					125,
					129,
					126,
					129,
					130,
					125,
					128,
					131,
					125,
					131,
					129,
					131,
					128,
					132,
					127,
					132,
					128,
					131,
					132,
					133,
					132,
					134,
					133,
					132,
					135,
					134,
					136,
					134,
					135,
					136,
					137,
					134,
					138,
					137,
					136,
					138,
					139,
					137,
					140,
					139,
					138,
					140,
					141,
					139,
					142,
					141,
					140,
					143,
					142,
					140,
					102,
					142,
					143,
					102,
					144,
					142,
					103,
					102,
					143,
					103,
					143,
					105,
					96,
					144,
					102,
					96,
					97,
					144,
					105,
					143,
					145,
					143,
					140,
					145,
					105,
					145,
					109,
					144,
					146,
					142,
					142,
					146,
					141,
					144,
					147,
					146,
					97,
					147,
					144,
					97,
					100,
					147,
					140,
					148,
					145,
					140,
					138,
					148,
					145,
					148,
					149,
					145,
					149,
					109,
					109,
					149,
					108,
					149,
					110,
					108,
					149,
					150,
					110,
					148,
					150,
					149,
					148,
					151,
					150,
					138,
					151,
					148,
					150,
					151,
					152,
					150,
					152,
					153,
					138,
					136,
					151,
					153,
					152,
					154,
					153,
					154,
					155,
					112,
					153,
					155,
					112,
					110,
					150,
					112,
					150,
					153,
					112,
					155,
					117,
					122,
					117,
					155,
					122,
					155,
					154,
					122,
					154,
					127,
					127,
					154,
					132,
					152,
					132,
					154,
					152,
					135,
					132,
					151,
					136,
					135,
					151,
					135,
					152,
					156,
					44,
					42,
					156,
					42,
					157,
					158,
					156,
					157,
					158,
					157,
					159,
					160,
					158,
					159,
					160,
					159,
					161,
					162,
					158,
					160,
					162,
					163,
					158,
					163,
					156,
					158,
					164,
					163,
					162,
					164,
					165,
					163,
					166,
					165,
					164,
					166,
					167,
					165,
					165,
					168,
					163,
					163,
					168,
					156,
					168,
					44,
					156,
					165,
					169,
					168,
					167,
					169,
					165,
					169,
					48,
					168,
					168,
					48,
					44,
					169,
					50,
					48,
					167,
					170,
					169,
					170,
					50,
					169,
					170,
					54,
					50,
					161,
					159,
					171,
					161,
					171,
					172,
					172,
					171,
					173,
					172,
					173,
					174,
					174,
					173,
					175,
					174,
					175,
					176,
					176,
					175,
					177,
					176,
					177,
					178,
					171,
					179,
					173,
					171,
					180,
					179,
					180,
					36,
					179,
					180,
					38,
					36,
					159,
					180,
					171,
					159,
					157,
					180,
					157,
					38,
					180,
					157,
					42,
					38,
					175,
					32,
					177,
					175,
					31,
					32,
					173,
					179,
					31,
					173,
					31,
					175,
					179,
					36,
					30,
					179,
					30,
					31,
					178,
					177,
					181,
					178,
					181,
					182,
					182,
					181,
					183,
					182,
					183,
					184,
					184,
					183,
					185,
					184,
					185,
					186,
					186,
					185,
					187,
					186,
					187,
					188,
					181,
					189,
					183,
					181,
					190,
					189,
					190,
					22,
					189,
					190,
					24,
					22,
					32,
					24,
					190,
					177,
					32,
					190,
					177,
					190,
					181,
					185,
					191,
					187,
					185,
					192,
					191,
					183,
					189,
					192,
					183,
					192,
					185,
					192,
					16,
					191,
					192,
					18,
					16,
					189,
					22,
					18,
					189,
					18,
					192,
					188,
					187,
					193,
					188,
					193,
					194,
					187,
					191,
					195,
					187,
					195,
					193,
					196,
					193,
					195,
					196,
					197,
					193,
					194,
					193,
					197,
					191,
					16,
					14,
					191,
					14,
					195,
					198,
					197,
					196,
					199,
					197,
					198,
					200,
					199,
					198,
					200,
					201,
					199,
					199,
					202,
					197,
					194,
					197,
					202,
					203,
					201,
					200,
					203,
					200,
					204,
					205,
					203,
					204,
					205,
					204,
					206,
					206,
					204,
					1,
					206,
					1,
					0,
					207,
					200,
					198,
					204,
					200,
					207,
					204,
					207,
					1,
					207,
					198,
					208,
					198,
					196,
					208,
					9,
					207,
					208,
					1,
					207,
					9,
					9,
					208,
					10,
					208,
					13,
					10,
					208,
					196,
					13,
					13,
					196,
					195,
					13,
					195,
					14,
					209,
					210,
					211,
					211,
					212,
					209,
					211,
					213,
					212,
					211,
					214,
					213,
					214,
					215,
					213,
					214,
					216,
					215,
					216,
					217,
					215,
					217,
					218,
					215
				],
				"vertices": [
					-0.003767336,
					2.889062,
					-0.002738062,
					-0.08037603,
					2.873857,
					-0.05841649,
					-0.09940806,
					2.873857,
					-4.440892e-18,
					-0.004659393,
					2.889062,
					-2.081668e-19,
					-0.08037603,
					2.873857,
					0.05841649,
					-0.003767336,
					2.889062,
					0.002738062,
					-0.03068978,
					2.873857,
					0.09444133,
					-0.001438472,
					2.889062,
					0.004426595,
					-0.1485687,
					2.829323,
					0.1079782,
					-0.1837478,
					2.829323,
					-1.332268e-17,
					-0.2404021,
					2.75463,
					-1.776357e-17,
					-0.1943762,
					2.75463,
					0.1412707,
					-0.2172135,
					2.651836,
					0.1578686,
					-0.2686469,
					2.651836,
					-8.881784e-18,
					-0.2608679,
					2.459793,
					-2.220446e-17,
					-0.2109238,
					2.459793,
					0.1532973,
					-0.220512,
					2.26356,
					-1.776357e-17,
					-0.1782942,
					2.26356,
					0.1295824,
					-0.2024626,
					2.057275,
					-1.332268e-17,
					-0.1637004,
					2.057275,
					0.1189758,
					-0.06807765,
					2.26356,
					0.2094946,
					-0.06250532,
					2.057275,
					0.1923469,
					-0.2054521,
					1.87023,
					-1.776357e-17,
					-0.1661175,
					1.87023,
					0.1207326,
					-0.2426541,
					1.714335,
					-1.776357e-17,
					-0.1961971,
					1.714335,
					0.1425941,
					-0.06342825,
					1.87023,
					0.1951871,
					-0.07491345,
					1.714335,
					0.2305304,
					-0.3428729,
					1.507062,
					-2.664535e-17,
					-0.2772287,
					1.507062,
					0.201487,
					-0.4223327,
					1.33455,
					-3.552714e-17,
					-0.3414756,
					1.33455,
					-0.248181,
					-0.2772287,
					1.507062,
					-0.201487,
					-0.3414756,
					1.33455,
					0.248181,
					-0.1058535,
					1.507062,
					0.325742,
					-0.1303848,
					1.33455,
					0.4012317,
					-0.4844817,
					1.141907,
					-2.664535e-17,
					-0.391726,
					1.141907,
					0.2847025,
					-0.5065457,
					0.9415197,
					-6.217249e-17,
					-0.4095657,
					0.9415197,
					0.2976682,
					-0.1495717,
					1.141907,
					0.4602755,
					-0.1563834,
					0.9415197,
					0.4812371,
					-0.4948069,
					0.7488078,
					-2.664535e-17,
					-0.4000743,
					0.7488078,
					0.29077,
					-0.459684,
					0.592738,
					-1.776357e-17,
					-0.3716759,
					0.592738,
					0.2701303,
					-0.1527594,
					0.7488078,
					0.4700848,
					-0.1419161,
					0.592738,
					0.4367168,
					-0.3930105,
					0.3714038,
					-4.440892e-17,
					-0.3177672,
					0.3714038,
					0.23095,
					-0.3217489,
					0.1590626,
					-1.776357e-17,
					-0.2601489,
					0.1590626,
					0.1890736,
					-0.1213323,
					0.3714038,
					0.3733745,
					-0.09933201,
					0.1590626,
					0.3056734,
					-0.2629391,
					0.0002131529,
					-2.220446e-17,
					-0.2125985,
					0.0002131529,
					0.1545144,
					-0.08117595,
					0.0002131529,
					0.2498019,
					0.1212735,
					0.3714038,
					0.3733937,
					0.09928394,
					0.1590626,
					0.3056891,
					0.3178018,
					0.3714038,
					0.2309019,
					0.2601773,
					0.1590626,
					0.1890343,
					0.08113665,
					0.0002131529,
					0.2498147,
					0.2126216,
					0.0002131529,
					0.1544823,
					0.1418474,
					0.592738,
					0.4367393,
					0.1526854,
					0.7488078,
					0.470109,
					0.4001179,
					0.7488078,
					0.2907095,
					0.3717164,
					0.592738,
					0.2700741,
					0.1563078,
					0.9415197,
					0.4812619,
					0.1494994,
					1.141907,
					0.4602993,
					0.3917686,
					1.141907,
					0.2846432,
					0.4096103,
					0.9415197,
					0.2976063,
					0.1303217,
					1.33455,
					0.4012524,
					0.1058023,
					1.507062,
					0.3257587,
					0.2772589,
					1.507062,
					0.2014451,
					0.3415127,
					1.33455,
					0.2481294,
					0.4948069,
					0.7488078,
					1.598721e-16,
					0.459684,
					0.592738,
					1.509903e-16,
					0.4001179,
					0.7488078,
					-0.2907095,
					0.3717164,
					0.592738,
					-0.2700741,
					0.3930105,
					0.3714038,
					1.421085e-16,
					0.3217489,
					0.1590626,
					1.065814e-16,
					0.3178018,
					0.3714038,
					-0.2309019,
					0.2601773,
					0.1590626,
					-0.1890343,
					0.2629391,
					0.0002131529,
					9.769963e-17,
					0.2126216,
					0.0002131529,
					-0.1544823,
					0.1212735,
					0.3714038,
					-0.3733937,
					0.09928394,
					0.1590626,
					-0.3056891,
					0.08113665,
					0.0002131529,
					-0.2498147,
					0.1526854,
					0.7488078,
					-0.470109,
					0.1418474,
					0.592738,
					-0.4367393,
					0.1563078,
					0.9415197,
					-0.4812619,
					0.4096103,
					0.9415197,
					-0.2976063,
					0.5065457,
					0.9415197,
					1.598721e-16,
					0.3917686,
					1.141907,
					-0.2846432,
					0.4844817,
					1.141907,
					1.776357e-16,
					0.4223327,
					1.33455,
					1.421085e-16,
					0.3428729,
					1.507062,
					1.154632e-16,
					0.2772589,
					1.507062,
					-0.2014451,
					0.3415127,
					1.33455,
					-0.2481294,
					0.1494994,
					1.141907,
					-0.4602993,
					0.1058023,
					1.507062,
					-0.3257587,
					0.1303217,
					1.33455,
					-0.4012524,
					0.2426541,
					1.714335,
					8.881784e-17,
					0.1962185,
					1.714335,
					0.1425644,
					0.07487719,
					1.714335,
					0.2305422,
					0.1661356,
					1.87023,
					0.1207074,
					0.06339756,
					1.87023,
					0.1951971,
					0.06247507,
					2.057275,
					0.1923569,
					0.06804469,
					2.26356,
					0.2095054,
					0.1637182,
					2.057275,
					0.118951,
					0.08049754,
					2.459793,
					0.247847,
					-0.08053653,
					2.459793,
					0.2478342,
					0.08289795,
					2.651836,
					0.2552377,
					-0.0829381,
					2.651836,
					0.2552246,
					-0.0742182,
					2.75463,
					0.2283909,
					-0.0567276,
					2.829323,
					0.1745673,
					0.05670015,
					2.829323,
					0.1745762,
					0.07418227,
					2.75463,
					0.2284026,
					0.03067493,
					2.873857,
					0.0944462,
					0.001437776,
					2.889062,
					0.004426824,
					0.08038478,
					2.873857,
					0.05840433,
					0.003767746,
					2.889062,
					0.002737492,
					0.1485848,
					2.829323,
					0.1079557,
					0.09940806,
					2.873857,
					3.552714e-17,
					0.004659393,
					2.889062,
					1.595946e-18,
					0.08038478,
					2.873857,
					-0.05840433,
					0.003767746,
					2.889062,
					-0.002737492,
					0.1837478,
					2.829323,
					6.661338e-17,
					0.1485848,
					2.829323,
					-0.1079557,
					0.03067493,
					2.873857,
					-0.0944462,
					0.001437776,
					2.889062,
					-0.004426824,
					0.05670015,
					2.829323,
					-0.1745762,
					0.1943974,
					2.75463,
					-0.1412413,
					0.07418227,
					2.75463,
					-0.2284026,
					0.08289795,
					2.651836,
					-0.2552377,
					0.2172372,
					2.651836,
					-0.1578358,
					0.2109468,
					2.459793,
					-0.1532654,
					0.08049754,
					2.459793,
					-0.247847,
					0.1783136,
					2.26356,
					-0.1295555,
					0.06804469,
					2.26356,
					-0.2095054,
					0.1637182,
					2.057275,
					-0.118951,
					0.06247507,
					2.057275,
					-0.1923569,
					0.1661356,
					1.87023,
					-0.1207074,
					0.2054521,
					1.87023,
					7.105427e-17,
					0.1962185,
					1.714335,
					-0.1425644,
					0.2024626,
					2.057275,
					7.993605e-17,
					0.06339756,
					1.87023,
					-0.1951971,
					0.07487719,
					1.714335,
					-0.2305422,
					0.220512,
					2.26356,
					7.993605e-17,
					0.1783136,
					2.26356,
					0.1295555,
					0.2109468,
					2.459793,
					0.1532654,
					0.2608679,
					2.459793,
					9.325873e-17,
					0.2686469,
					2.651836,
					9.769963e-17,
					0.2172372,
					2.651836,
					0.1578358,
					0.2404021,
					2.75463,
					8.881784e-17,
					0.1943974,
					2.75463,
					0.1412413,
					-0.3716759,
					0.592738,
					-0.2701303,
					-0.4000743,
					0.7488078,
					-0.29077,
					-0.1419161,
					0.592738,
					-0.4367168,
					-0.1527594,
					0.7488078,
					-0.4700848,
					0.1418474,
					0.592738,
					-0.4367393,
					0.1526854,
					0.7488078,
					-0.470109,
					0.1212735,
					0.3714038,
					-0.3733937,
					-0.1213323,
					0.3714038,
					-0.3733745,
					0.09928394,
					0.1590626,
					-0.3056891,
					-0.09933201,
					0.1590626,
					-0.3056734,
					0.08113665,
					0.0002131529,
					-0.2498147,
					-0.08117595,
					0.0002131529,
					-0.2498019,
					-0.3177672,
					0.3714038,
					-0.23095,
					-0.2601489,
					0.1590626,
					-0.1890736,
					-0.2125985,
					0.0002131529,
					-0.1545144,
					-0.1563834,
					0.9415197,
					-0.4812371,
					0.1563078,
					0.9415197,
					-0.4812619,
					-0.1495717,
					1.141907,
					-0.4602755,
					0.1494994,
					1.141907,
					-0.4602993,
					-0.1303848,
					1.33455,
					-0.4012317,
					0.1303217,
					1.33455,
					-0.4012524,
					-0.1058535,
					1.507062,
					-0.325742,
					0.1058023,
					1.507062,
					-0.3257587,
					-0.391726,
					1.141907,
					-0.2847025,
					-0.4095657,
					0.9415197,
					-0.2976682,
					-0.07491345,
					1.714335,
					-0.2305304,
					0.07487719,
					1.714335,
					-0.2305422,
					-0.06342825,
					1.87023,
					-0.1951871,
					0.06339756,
					1.87023,
					-0.1951971,
					-0.06250532,
					2.057275,
					-0.1923469,
					0.06247507,
					2.057275,
					-0.1923569,
					-0.06807765,
					2.26356,
					-0.2094946,
					0.06804469,
					2.26356,
					-0.2095054,
					-0.1661175,
					1.87023,
					-0.1207326,
					-0.1961971,
					1.714335,
					-0.1425941,
					-0.1782942,
					2.26356,
					-0.1295824,
					-0.1637004,
					2.057275,
					-0.1189758,
					-0.08053653,
					2.459793,
					-0.2478342,
					0.08049754,
					2.459793,
					-0.247847,
					-0.2109238,
					2.459793,
					-0.1532973,
					-0.2172135,
					2.651836,
					-0.1578686,
					-0.0829381,
					2.651836,
					-0.2552246,
					-0.0742182,
					2.75463,
					-0.2283909,
					0.07418227,
					2.75463,
					-0.2284026,
					-0.0567276,
					2.829323,
					-0.1745673,
					0.05670015,
					2.829323,
					-0.1745762,
					0.08289795,
					2.651836,
					-0.2552377,
					0.03067493,
					2.873857,
					-0.0944462,
					-0.03068978,
					2.873857,
					-0.09444133,
					0.001437776,
					2.889062,
					-0.004426824,
					-0.001438472,
					2.889062,
					-0.004426595,
					-0.1485687,
					2.829323,
					-0.1079782,
					-0.1943762,
					2.75463,
					-0.1412707,
					-0.08117595,
					0.0002131529,
					-0.2498019,
					0.08113665,
					0.0002131529,
					-0.2498147,
					0.2126216,
					0.0002131529,
					-0.1544823,
					-0.2125985,
					0.0002131529,
					-0.1545144,
					-0.2629391,
					0.0002131529,
					-2.220446e-17,
					0.2629391,
					0.0002131529,
					9.769963e-17,
					-0.2125985,
					0.0002131529,
					0.1545144,
					0.2126216,
					0.0002131529,
					0.1544823,
					0.08113665,
					0.0002131529,
					0.2498147,
					-0.08117595,
					0.0002131529,
					0.2498019
				],
				"uvs": [
					0.8000448,
					1,
					0.8000448,
					0.9947367,
					0.7000191,
					0.9947367,
					0.7000191,
					1,
					0.5999933,
					0.9947367,
					0.5999933,
					1,
					0.500025,
					0.9947367,
					0.500025,
					1,
					0.5999933,
					0.9793209,
					0.7000191,
					0.9793209,
					0.7000191,
					0.9534652,
					0.5999933,
					0.9534652,
					0.5999933,
					0.917882,
					0.7000191,
					0.917882,
					0.7000191,
					0.8514047,
					0.5999933,
					0.8514047,
					0.7000191,
					0.7834769,
					0.5999933,
					0.7834769,
					0.7000191,
					0.7120696,
					0.5999933,
					0.7120696,
					0.500025,
					0.7834769,
					0.500025,
					0.7120696,
					0.7000191,
					0.6473226,
					0.5999933,
					0.6473226,
					0.7000191,
					0.5933582,
					0.5999933,
					0.5933582,
					0.500025,
					0.6473226,
					0.500025,
					0.5933582,
					0.7000191,
					0.5216088,
					0.5999933,
					0.5216088,
					0.7000191,
					0.4618922,
					0.8000448,
					0.4618922,
					0.8000448,
					0.5216088,
					0.5999933,
					0.4618922,
					0.500025,
					0.5216088,
					0.500025,
					0.4618922,
					0.7000191,
					0.3952073,
					0.5999933,
					0.3952073,
					0.7000191,
					0.3258414,
					0.5999933,
					0.3258414,
					0.500025,
					0.3952073,
					0.500025,
					0.3258414,
					0.7000191,
					0.2591325,
					0.5999933,
					0.2591325,
					0.7000191,
					0.2051076,
					0.5999933,
					0.2051076,
					0.500025,
					0.2591325,
					0.500025,
					0.2051076,
					0.7000191,
					0.1284909,
					0.5999933,
					0.1284909,
					0.7000191,
					0.05498713,
					0.5999933,
					0.05498713,
					0.500025,
					0.1284909,
					0.500025,
					0.05498713,
					0.7000191,
					2.980232e-8,
					0.5999933,
					2.980232e-8,
					0.500025,
					2.980232e-8,
					0.4000381,
					0.1284909,
					0.4000381,
					0.05498713,
					0.3000208,
					0.1284909,
					0.3000208,
					0.05498713,
					0.4000381,
					2.980232e-8,
					0.3000208,
					2.980232e-8,
					0.4000381,
					0.2051076,
					0.4000381,
					0.2591325,
					0.3000208,
					0.2591325,
					0.3000208,
					0.2051076,
					0.4000381,
					0.3258414,
					0.4000381,
					0.3952073,
					0.3000208,
					0.3952073,
					0.3000208,
					0.3258414,
					0.4000381,
					0.4618922,
					0.4000381,
					0.5216088,
					0.3000208,
					0.5216088,
					0.3000208,
					0.4618922,
					0.2000191,
					0.2591325,
					0.2000191,
					0.2051076,
					0.1000173,
					0.2591325,
					0.1000173,
					0.2051076,
					0.2000191,
					0.1284909,
					0.2000191,
					0.05498713,
					0.1000173,
					0.1284909,
					0.1000173,
					0.05498713,
					0.2000191,
					2.980232e-8,
					0.1000173,
					2.980232e-8,
					0,
					0.1284909,
					0,
					0.05498713,
					0,
					2.980232e-8,
					0,
					0.2591325,
					0,
					0.2051076,
					0,
					0.3258414,
					0.1000173,
					0.3258414,
					0.2000191,
					0.3258414,
					0.1000173,
					0.3952073,
					0.2000191,
					0.3952073,
					0.2000191,
					0.4618922,
					0.2000191,
					0.5216088,
					0.1000173,
					0.5216088,
					0.1000173,
					0.4618922,
					0,
					0.3952073,
					0,
					0.5216088,
					0,
					0.4618922,
					0.2000191,
					0.5933582,
					0.3000208,
					0.5933582,
					0.4000381,
					0.5933582,
					0.3000208,
					0.6473226,
					0.4000381,
					0.6473226,
					0.4000381,
					0.7120696,
					0.4000381,
					0.7834769,
					0.3000208,
					0.7120696,
					0.4000381,
					0.8514047,
					0.500025,
					0.8514047,
					0.4000381,
					0.917882,
					0.500025,
					0.917882,
					0.500025,
					0.9534652,
					0.500025,
					0.9793209,
					0.4000381,
					0.9793209,
					0.4000381,
					0.9534652,
					0.4000381,
					0.9947367,
					0.4000381,
					1,
					0.3000208,
					0.9947367,
					0.3000208,
					1,
					0.3000208,
					0.9793209,
					0.2000191,
					0.9947367,
					0.2000191,
					1,
					0.1000173,
					0.9947367,
					0.1000173,
					1,
					0.2000191,
					0.9793209,
					0.1000173,
					0.9793209,
					0,
					0.9947367,
					0,
					1,
					0,
					0.9793209,
					0.1000173,
					0.9534652,
					0,
					0.9534652,
					0,
					0.917882,
					0.1000173,
					0.917882,
					0.1000173,
					0.8514047,
					0,
					0.8514047,
					0.1000173,
					0.7834769,
					0,
					0.7834769,
					0.1000173,
					0.7120696,
					0,
					0.7120696,
					0.1000173,
					0.6473226,
					0.2000191,
					0.6473226,
					0.1000173,
					0.5933582,
					0.2000191,
					0.7120696,
					0,
					0.6473226,
					0,
					0.5933582,
					0.2000191,
					0.7834769,
					0.3000208,
					0.7834769,
					0.3000208,
					0.8514047,
					0.2000191,
					0.8514047,
					0.2000191,
					0.917882,
					0.3000208,
					0.917882,
					0.2000191,
					0.9534652,
					0.3000208,
					0.9534652,
					0.8000448,
					0.2051076,
					0.8000448,
					0.2591325,
					0.9000131,
					0.2051076,
					0.9000131,
					0.2591325,
					1,
					0.2051076,
					1,
					0.2591325,
					1,
					0.1284909,
					0.9000131,
					0.1284909,
					1,
					0.05498713,
					0.9000131,
					0.05498713,
					1,
					2.980232e-8,
					0.9000131,
					2.980232e-8,
					0.8000448,
					0.1284909,
					0.8000448,
					0.05498713,
					0.8000448,
					2.980232e-8,
					0.9000131,
					0.3258414,
					1,
					0.3258414,
					0.9000131,
					0.3952073,
					1,
					0.3952073,
					0.9000131,
					0.4618922,
					1,
					0.4618922,
					0.9000131,
					0.5216088,
					1,
					0.5216088,
					0.8000448,
					0.3952073,
					0.8000448,
					0.3258414,
					0.9000131,
					0.5933582,
					1,
					0.5933582,
					0.9000131,
					0.6473226,
					1,
					0.6473226,
					0.9000131,
					0.7120696,
					1,
					0.7120696,
					0.9000131,
					0.7834769,
					1,
					0.7834769,
					0.8000448,
					0.6473226,
					0.8000448,
					0.5933582,
					0.8000448,
					0.7834769,
					0.8000448,
					0.7120696,
					0.9000131,
					0.8514047,
					1,
					0.8514047,
					0.8000448,
					0.8514047,
					0.8000448,
					0.917882,
					0.9000131,
					0.917882,
					0.9000131,
					0.9534652,
					1,
					0.9534652,
					0.9000131,
					0.9793209,
					1,
					0.9793209,
					1,
					0.917882,
					1,
					0.9947367,
					0.9000131,
					0.9947367,
					1,
					1,
					0.9000131,
					1,
					0.8000448,
					0.9793209,
					0.8000448,
					0.9534652,
					0.9000131,
					2.980232e-8,
					1,
					2.980232e-8,
					0.1000173,
					2.980232e-8,
					0.8000448,
					2.980232e-8,
					0.7000191,
					2.980232e-8,
					0.2000191,
					2.980232e-8,
					0.5999933,
					2.980232e-8,
					0.3000208,
					2.980232e-8,
					0.4000381,
					2.980232e-8,
					0.500025,
					2.980232e-8
				],
				"normals": [
					-0.1281576,
					0.9873552,
					-0.09330309,
					-0.255674,
					0.948676,
					-0.1861306,
					-0.3161206,
					0.948719,
					-0.000002108825,
					-0.1584507,
					0.9873669,
					-0.00000415177,
					-0.2556741,
					0.9486765,
					0.1861284,
					-0.1281577,
					0.9873555,
					0.09329897,
					-0.09762868,
					0.9486222,
					0.3009729,
					-0.04893913,
					0.9873406,
					0.1508753,
					-0.5218976,
					0.7637306,
					0.3799192,
					-0.6453688,
					0.7638711,
					0,
					-0.8960848,
					0.4438828,
					0,
					-0.7245365,
					0.4437229,
					0.5274058,
					-0.8032421,
					0.1137924,
					0.5846823,
					-0.9934987,
					0.1138434,
					0,
					-0.9926,
					-0.1214305,
					0,
					-0.8025168,
					-0.1213753,
					0.5841531,
					-0.9894921,
					-0.1445875,
					0,
					-0.8000063,
					-0.144522,
					0.5823259,
					-0.9993644,
					-0.03564852,
					0,
					-0.8079816,
					-0.03563203,
					0.5881294,
					-0.3053518,
					-0.144438,
					0.9412215,
					-0.3083927,
					-0.03561091,
					0.9505923,
					-0.9921653,
					0.1249316,
					0,
					-0.8021655,
					0.1248752,
					0.5838979,
					-0.9418612,
					0.336002,
					0,
					-0.761525,
					0.3358651,
					0.5543233,
					-0.3061748,
					0.124803,
					0.943759,
					-0.2906769,
					0.3356901,
					0.8960017,
					-0.9043226,
					0.4268498,
					0,
					-0.7311953,
					0.4266877,
					0.532251,
					-0.9316127,
					0.3634527,
					0,
					-0.7532451,
					0.3633068,
					-0.5482973,
					-0.7311953,
					0.4266877,
					-0.5322509,
					-0.7532451,
					0.3633068,
					0.5482973,
					-0.2791101,
					0.4264797,
					0.8603561,
					-0.2875196,
					0.3631197,
					0.8862712,
					-0.9778074,
					0.2095058,
					0,
					-0.7905663,
					0.2094137,
					0.5754571,
					-0.9997016,
					0.0244277,
					0,
					-0.8082537,
					0.02441639,
					0.588328,
					-0.3017519,
					0.2092959,
					0.9301296,
					-0.3084964,
					0.02440188,
					0.9509124,
					-0.9900501,
					-0.1407158,
					0,
					-0.8004567,
					-0.1406521,
					0.5826542,
					-0.967156,
					-0.2541838,
					0,
					-0.7819616,
					-0.2540735,
					0.5691949,
					-0.3055235,
					-0.1405707,
					0.9417512,
					-0.298471,
					-0.2539321,
					0.9200182,
					-0.9528824,
					-0.3033398,
					0,
					-0.77043,
					-0.3032119,
					0.5608031,
					-0.9430246,
					-0.3327231,
					0,
					-0.7624657,
					-0.3325857,
					0.5550072,
					-0.2940735,
					-0.3030479,
					0.9064672,
					-0.2910362,
					-0.3324095,
					0.8971075,
					-0.9377936,
					-0.3471934,
					0,
					-0.7582393,
					-0.3470515,
					0.5519315,
					-0.2894245,
					-0.3468696,
					0.8921406,
					0.2940017,
					-0.303048,
					0.9064904,
					0.2909653,
					-0.3324096,
					0.8971304,
					0.77045,
					-0.3032117,
					0.5607758,
					0.7624851,
					-0.3325855,
					0.5549804,
					0.2893541,
					-0.3468699,
					0.8921635,
					0.7582586,
					-0.3470513,
					0.551905,
					0.2983979,
					-0.2539322,
					0.9200419,
					0.3054484,
					-0.1405708,
					0.9417755,
					0.8004778,
					-0.1406521,
					0.5826253,
					0.781982,
					-0.2540733,
					0.5691669,
					0.3084206,
					0.02440188,
					0.9509371,
					0.301678,
					0.2092961,
					0.9301535,
					0.7905869,
					0.2094137,
					0.5754287,
					0.8082751,
					0.02441634,
					0.5882986,
					0.2874497,
					0.3631199,
					0.8862937,
					0.2790427,
					0.4264798,
					0.8603779,
					0.7312137,
					0.4266874,
					0.5322258,
					0.7532643,
					0.3633066,
					0.5482711,
					0.9900501,
					-0.1407158,
					0,
					0.967156,
					-0.2541838,
					0,
					0.8004778,
					-0.1406521,
					-0.5826252,
					0.781982,
					-0.2540733,
					-0.5691669,
					0.9528824,
					-0.3033397,
					0,
					0.9430246,
					-0.332723,
					0,
					0.77045,
					-0.3032117,
					-0.5607758,
					0.7624851,
					-0.3325854,
					-0.5549803,
					0.9377936,
					-0.3471932,
					0,
					0.7582588,
					-0.3470513,
					-0.5519049,
					0.2940017,
					-0.303048,
					-0.9064904,
					0.2909653,
					-0.3324096,
					-0.8971304,
					0.2893541,
					-0.3468698,
					-0.8921634,
					0.3054485,
					-0.1405707,
					-0.9417755,
					0.2983979,
					-0.2539322,
					-0.9200419,
					0.3084206,
					0.02440188,
					-0.9509371,
					0.8082751,
					0.02441634,
					-0.5882986,
					0.9997016,
					0.02442767,
					0,
					0.7905869,
					0.2094137,
					-0.5754287,
					0.9778074,
					0.2095059,
					0,
					0.9316126,
					0.3634527,
					0,
					0.9043226,
					0.4268497,
					0,
					0.7312137,
					0.4266874,
					-0.5322258,
					0.7532644,
					0.3633066,
					-0.548271,
					0.301678,
					0.2092961,
					-0.9301535,
					0.2790426,
					0.4264799,
					-0.8603778,
					0.2874498,
					0.36312,
					-0.8862937,
					0.9418612,
					0.3360018,
					0,
					0.7615445,
					0.3358649,
					0.5542966,
					0.2906062,
					0.3356903,
					0.8960246,
					0.8021865,
					0.1248752,
					0.5838689,
					0.3060997,
					0.1248031,
					0.9437833,
					0.3083169,
					-0.03561094,
					0.9506168,
					0.3052768,
					-0.1444381,
					0.9412457,
					0.8080029,
					-0.03563201,
					0.5881,
					0.3062336,
					-0.1213047,
					0.944196,
					-0.306309,
					-0.1213046,
					0.9441716,
					0.3065097,
					0.1137275,
					0.945049,
					-0.306585,
					0.1137274,
					0.9450247,
					-0.2765687,
					0.44352,
					0.8525255,
					-0.1992541,
					0.7635531,
					0.6142349,
					0.1992073,
					0.7635538,
					0.6142492,
					0.2765021,
					0.443521,
					0.8525466,
					0.09760635,
					0.948622,
					0.3009804,
					0.04892825,
					0.9873406,
					0.150879,
					0.255679,
					0.9486761,
					0.1861234,
					0.12816,
					0.9873553,
					0.09329754,
					0.5219089,
					0.7637304,
					0.3799037,
					0.316121,
					0.948719,
					-6.763418e-7,
					0.1584507,
					0.9873669,
					-0.000002077748,
					0.2556789,
					0.9486759,
					-0.1861245,
					0.12816,
					0.9873551,
					-0.09330065,
					0.6453696,
					0.7638704,
					6.474516e-7,
					0.521909,
					0.7637306,
					-0.3799033,
					0.09760633,
					0.9486217,
					-0.3009813,
					0.04892824,
					0.9873404,
					-0.1508811,
					0.1992073,
					0.7635538,
					-0.6142492,
					0.7245545,
					0.4437231,
					-0.5273808,
					0.276502,
					0.4435208,
					-0.8525468,
					0.3065098,
					0.1137275,
					-0.945049,
					0.8032631,
					0.1137923,
					-0.5846535,
					0.8025379,
					-0.1213752,
					-0.5841241,
					0.3062336,
					-0.1213046,
					-0.944196,
					0.8000273,
					-0.1445219,
					-0.5822969,
					0.3052768,
					-0.1444381,
					-0.9412459,
					0.8080029,
					-0.03563201,
					-0.5881,
					0.308317,
					-0.03561094,
					-0.9506168,
					0.8021867,
					0.1248752,
					-0.5838687,
					0.9921653,
					0.1249316,
					0,
					0.7615445,
					0.335865,
					-0.5542964,
					0.9993644,
					-0.03564852,
					0,
					0.3060997,
					0.1248031,
					-0.9437833,
					0.2906063,
					0.3356903,
					-0.8960245,
					0.9894921,
					-0.1445875,
					0,
					0.8000273,
					-0.1445219,
					0.5822969,
					0.8025379,
					-0.1213752,
					0.5841241,
					0.9926,
					-0.1214305,
					0,
					0.9934988,
					0.1138432,
					0,
					0.8032631,
					0.1137924,
					0.5846535,
					0.8960851,
					0.4438822,
					2.526606e-7,
					0.7245545,
					0.4437232,
					0.5273808,
					-0.7819616,
					-0.2540735,
					-0.5691949,
					-0.8004567,
					-0.1406521,
					-0.5826542,
					-0.298471,
					-0.2539321,
					-0.9200183,
					-0.3055235,
					-0.1405707,
					-0.9417512,
					0.2983979,
					-0.2539322,
					-0.9200419,
					0.3054485,
					-0.1405707,
					-0.9417755,
					0.2940017,
					-0.303048,
					-0.9064904,
					-0.2940735,
					-0.3030478,
					-0.9064672,
					0.2909653,
					-0.3324096,
					-0.8971304,
					-0.2910362,
					-0.3324095,
					-0.8971075,
					0.2893541,
					-0.3468698,
					-0.8921634,
					-0.2894245,
					-0.3468696,
					-0.8921406,
					-0.77043,
					-0.3032119,
					-0.5608031,
					-0.7624655,
					-0.3325857,
					-0.5550072,
					-0.7582393,
					-0.3470515,
					-0.5519315,
					-0.3084964,
					0.02440189,
					-0.9509124,
					0.3084206,
					0.02440188,
					-0.9509371,
					-0.3017519,
					0.2092959,
					-0.9301296,
					0.301678,
					0.2092961,
					-0.9301535,
					-0.2875196,
					0.3631198,
					-0.8862712,
					0.2874498,
					0.36312,
					-0.8862937,
					-0.2791101,
					0.4264798,
					-0.8603561,
					0.2790426,
					0.4264799,
					-0.8603778,
					-0.7905663,
					0.2094137,
					-0.5754571,
					-0.8082537,
					0.02441639,
					-0.588328,
					-0.2906769,
					0.33569,
					-0.8960017,
					0.2906063,
					0.3356903,
					-0.8960245,
					-0.3061748,
					0.124803,
					-0.9437591,
					0.3060997,
					0.1248031,
					-0.9437833,
					-0.3083927,
					-0.03561093,
					-0.9505923,
					0.308317,
					-0.03561094,
					-0.9506168,
					-0.3053518,
					-0.144438,
					-0.9412215,
					0.3052768,
					-0.1444381,
					-0.9412459,
					-0.8021654,
					0.1248752,
					-0.5838979,
					-0.761525,
					0.3358651,
					-0.5543233,
					-0.8000063,
					-0.144522,
					-0.5823259,
					-0.8079816,
					-0.03563203,
					-0.5881294,
					-0.306309,
					-0.1213046,
					-0.9441716,
					0.3062336,
					-0.1213046,
					-0.944196,
					-0.8025168,
					-0.1213753,
					-0.5841532,
					-0.8032421,
					0.1137924,
					-0.5846824,
					-0.306585,
					0.1137274,
					-0.9450248,
					-0.2765686,
					0.4435197,
					-0.8525257,
					0.276502,
					0.4435208,
					-0.8525468,
					-0.199254,
					0.763553,
					-0.614235,
					0.1992073,
					0.7635538,
					-0.6142492,
					0.3065098,
					0.1137275,
					-0.945049,
					0.09760633,
					0.9486217,
					-0.3009813,
					-0.09762864,
					0.9486219,
					-0.3009733,
					0.04892824,
					0.9873404,
					-0.1508811,
					-0.04893914,
					0.9873405,
					-0.1508764,
					-0.5218974,
					0.7637305,
					-0.3799195,
					-0.7245365,
					0.4437228,
					-0.5274059,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0,
					0,
					-1,
					0
				]
			}
		]
	};

/***/ },
/* 49 */
/***/ function(module, exports) {

	module.exports = {
		"textures": [
			{
				"id": "alley",
				"path": "./textures/alley.png",
				"tiling": {
					"x": 1,
					"y": 1
				}
			}
		],
		"shader": "",
		"cullFace": true,
		"blendMode": "none"
	};

/***/ },
/* 50 */
/***/ function(module, exports) {

	module.exports = {
		"textures": [
			{
				"id": "pin.tex",
				"path": "./textures/bowlingpin.png"
			}
		]
	};

/***/ },
/* 51 */
/***/ function(module, exports) {

	module.exports = {
		"textures": [
			{
				"id": "ball.tex",
				"path": "./textures/bowling ball.png"
			}
		]
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	const Vue = __webpack_require__(38);

	module.exports = Vue.component('component-splash', {
	    template: __webpack_require__(53),

	    props: [
	        {name: 'game-manager',  required: true}
	    ],

	    data: function () {
	        return {
	            currentView: 'component-splash-scene',
	            showingPlayerSelection: false
	        }
	    },

	    methods: {

	        showPlayerSelection() {
	            this.showingPlayerSelection = true;
	        },

	        setPlayerCount(count) {

	            this.$el.classList.remove('slideInDown');
	            this.$el.classList.add('slideOutUp');

	            setTimeout(() => {
	                this.gameManager.start(count);
	                this.gameManager.endScene();
	            }, 1000);

	        }
	    },

	});

/***/ },
/* 53 */
/***/ function(module, exports) {

	module.exports = "<div class=\"component-main slideInDown\">\r\n\r\n    <div class=\"flip-card\" v-bind:class=\"{'flipped': showingPlayerSelection}\">\r\n\r\n        <div class=\"flip-front\"  v-show=\"!showingPlayerSelection\" v-on:click=\"showPlayerSelection()\">\r\n\r\n            <div class=\"splash-screen\">\r\n                <h1>Bowling With</h1>\r\n                <img src=\"./textures/babbel-logo.png\"/>\r\n                <p class=\"pulsate\">Click to get rollin...</p>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"flip-back\" v-else>\r\n            <div class=\"player-selection-panel\">\r\n                <img src=\"./textures/babbel-logo.png\"/>\r\n                <p>Select number of players</p>\r\n                <div class=\"player-selection-grid\">\r\n\r\n                    <div class=\"player-select-button\" v-on:click=\"setPlayerCount(1)\">1</div>\r\n                    <div class=\"player-select-button\" v-on:click=\"setPlayerCount(2)\">2</div>\r\n                    <div class=\"player-select-button\" v-on:click=\"setPlayerCount(3)\">3</div>\r\n                    <div class=\"player-select-button\" v-on:click=\"setPlayerCount(4)\">4</div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n";

/***/ },
/* 54 */
/***/ function(module, exports) {

	class PlayerStats {

	    constructor() {
	        this.gamesPlayed = 0;
	        this.gamesWon = 0;
	        this.totalSpares = 0;
	        this.totalStrikes = 0;
	        this.highScore = 0;
	        this.totalScore = 0;
	    }
	}

	module.exports = PlayerStats;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	const SceneObject = __webpack_require__(14);
	const ResourceManager = __webpack_require__(40);
	const vec3 = __webpack_require__(4).vec3;
	const Physics = __webpack_require__(16);

	module.exports = {

	    load: function () {

	        const physicsWorld = new Physics.World();
	        physicsWorld.gravity.set(0, -9.82, 0);
	        var root = new SceneObject();

	        return {root, physicsWorld };
	    }
	};



/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	const Vue = __webpack_require__(38);

	Vue.component("component-frame-start", {
	    template: __webpack_require__(56)
	});

/***/ },
/* 57 */
/***/ function(module, exports) {

	

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	const Vue = __webpack_require__(38);

	const messages = [
	    "time to shine!",
	    "ready to roll!",
	    "knock em' dead!",
	    "jetzt gehts los!",
	    "Vamanos! Rapido!",
	    "pin-Pocolypse Now!"
	];

	__webpack_require__(59);

	Vue.component("component-player-turn", {
	    template: __webpack_require__(63),
	    props: [{name: 'player-index', required: true}],
	    data: function() {
	        return {
	            motivationalMessage: messages[(Math.random() * messages.length) | 0]
	        }
	    }
	});

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(60);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(62)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./player_turn.scss", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./player_turn.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(61)();
	// imports


	// module
	exports.push([module.id, ".component-player-turn {\n  color: white; }\n", ""]);

	// exports


/***/ },
/* 61 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = "<div class=\"component-player-turn\">\r\n    <h1>Player {{(playerIndex + 1)}}, {{motivationalMessage}}</h1>\r\n</div>";

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	const Vue = __webpack_require__(38);
	__webpack_require__(65);

	module.exports = Vue.component('component-score-board', {
	    template: __webpack_require__(67),
	    props: [{name: 'game-manager', required: true}],
	    data: function () {
	        return {
	            scoreKeepers: [],
	            scoreStrings: []
	        }
	    },

	    ready() {
	        const players = this.gameManager.turnManager.players;
	        const scoreStrings = [];
	        for(var i = 0; i < players.length; i++) {
	            const scores = [];
	            const scoreKeeper = players[i].scoreKeeper;
	            this.scoreKeepers.push(scoreKeeper);
	            for(var j = 0; j < 10; j++) {
	                scores.push(this.getScoreString(scoreKeeper.frames[j]));
	            }
	            scoreStrings.push(scores);
	        }
	        this.$set("scoreStrings", scoreStrings);
	    },

	    methods: {
	        getScoreString(frame) {
	            if(frame.totalRolls === 0) {
	                return "";
	            }
	            if(frame.isStrike) {
	                return "X";
	            }
	            if(frame.isSpare) {
	                return "/";
	            }
	            return frame.score;
	        }
	    }
	});

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(66);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(62)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./score_board.scss", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./score_board.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(61)();
	// imports


	// module
	exports.push([module.id, ".score-board-container {\n  display: flex;\n  flex-direction: column;\n  color: white;\n  background: #ff8d13;\n  border-radius: 20px;\n  padding: 1em;\n  margin-top: 8em;\n  text-align: center; }\n  .score-board-container table {\n    border-collapse: collapse; }\n  .score-board-container th {\n    padding: 0.5em; }\n  .score-board-container td {\n    padding: 0.25em;\n    border: 1px solid white; }\n  .score-board-container .score-board {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    margin: 1em; }\n", ""]);

	// exports


/***/ },
/* 67 */
/***/ function(module, exports) {

	module.exports = "<div class=\"score-board-container\">\r\n    <h1>Scoreboard</h1>\r\n    <table>\r\n        <thead>\r\n        <tr>\r\n            <th>Player</th>\r\n            <th>Frame 1</th>\r\n            <th>Frame 2</th>\r\n            <th>Frame 3</th>\r\n            <th>Frame 4</th>\r\n            <th>Frame 5</th>\r\n            <th>Frame 6</th>\r\n            <th>Frame 7</th>\r\n            <th>Frame 8</th>\r\n            <th>Frame 9</th>\r\n            <th>Frame 10</th>\r\n            <th>Total</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        <template v-for=\"scores in scoreStrings\">\r\n            <tr>\r\n                <td>{{($index + 1)}}</td>\r\n                <td>{{scores[0]}}</td>\r\n                <td>{{scores[1]}}</td>\r\n                <td>{{scores[2]}}</td>\r\n                <td>{{scores[3]}}</td>\r\n                <td>{{scores[4]}}</td>\r\n                <td>{{scores[5]}}</td>\r\n                <td>{{scores[6]}}</td>\r\n                <td>{{scores[7]}}</td>\r\n                <td>{{scores[8]}}</td>\r\n                <td>{{scores[9]}}</td>\r\n                <td>300</td>\r\n            </tr>\r\n        </template>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n";

/***/ }
]);